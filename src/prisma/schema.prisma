// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id            String   @id @default(uuid())
  name          String   @unique
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                      String                  @id @default(uuid())
  fullName                String
  email                   String                  @unique
  sex                     String
  phoneNumber             String
  schoolId                String
  school                  School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  joinDate                DateTime
  salary                  Float?
  status                  String                  @default("active") // active, inactive
  closureDate             DateTime?
  addressId               String?                 @unique
  address                 Address?                @relation(fields: [addressId], references: [id], onDelete: Cascade)
  emergencyContactId      String?                 @unique
  emergencyContact        EmergencyContact?       @relation(fields: [emergencyContactId], references: [id], onDelete: Cascade)
  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  Saving                  Saving[]
}

model Address {
  id           String      @id @default(uuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  member       Member?
  collateral   Collateral?
}

model EmergencyContact {
  id     String  @id @default(uuid())
  name   String
  phone  String
  member Member?
}

model MemberSavingAccount {
  id                    String             @id @default(uuid())
  memberId              String
  member                Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountTypeId   String
  savingAccountType     SavingAccountType  @relation(fields: [savingAccountTypeId], references: [id])
  accountNumber         String             @unique
  balance               Float              @default(0.0)
  expectedMonthlySaving Float
  savings               Saving[]

  @@unique([memberId, savingAccountTypeId])
}

model SavingAccountType {
  id                String                @id @default(uuid())
  name              String                @unique
  interestRate      Float // e.g., 0.05 for 5%
  contributionType  String // FIXED or PERCENTAGE
  contributionValue Float
  description       String?
  memberSavingAccounts MemberSavingAccount[]
}

model Saving {
  id                      String               @id @default(uuid())
  memberId                String
  member                  Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccountId   String
  memberSavingAccount     MemberSavingAccount  @relation(fields: [memberSavingAccountId], references: [id], onDelete: Cascade)
  amount                  Float
  date                    DateTime
  month                   String
  transactionType         String // deposit or withdrawal
  status                  String               @default("pending") // pending, approved, rejected
  notes                   String?
  depositMode             String? // Cash, Bank, Wallet
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
}

model MemberShareCommitment {
  id                      String    @id @default(uuid())
  memberId                String
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId             String
  shareType               ShareType @relation(fields: [shareTypeId], references: [id])
  monthlyCommittedAmount  Float

  @@unique([memberId, shareTypeId])
}

model ShareType {
  id                          String                  @id @default(uuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberCommitments           MemberShareCommitment[]
}

model Share {
  id                        String    @id @default(uuid())
  memberId                  String
  member                    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId               String
  shareType                 ShareType @relation(fields: [shareTypeId], references: [id])
  count                     Int
  allocationDate            DateTime
  valuePerShare             Float
  status                    String    @default("pending") // pending, approved, rejected
  notes                     String?
  contributionAmount        Float?
  totalValueForAllocation   Float?
  depositMode               String?
  sourceName                String?
  transactionReference      String?
  evidenceUrl               String?
}

model Dividend {
  id                       String   @id @default(uuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
}

model ServiceChargeType {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String // once, monthly, yearly
  appliedServiceCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                    String            @id @default(uuid())
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId   String
  serviceChargeType     ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  amountCharged         Float
  dateApplied           DateTime
  status                String            @default("pending") // pending, paid, waived
  notes                 String?
}

model LoanType {
  id                  String   @id @default(uuid())
  name                String   @unique
  interestRate        Float
  loanTerm            Int
  repaymentFrequency  String // monthly, quarterly, yearly
  nplInterestRate     Float
  nplGracePeriodDays  Int?
  allowConcurrent     Boolean?
  loans               Loan[]
}

model Loan {
  id                   String          @id @default(uuid())
  loanAccountNumber    String?         @unique
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id])
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String          @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  monthlyRepaymentAmount Float?
  collaterals          Collateral[]
  repayments           LoanRepayment[]
}

model Organization {
  id           String      @id @default(uuid())
  name         String
  address      String
  phone        String
  collateral   Collateral?
}

model Collateral {
  id             String        @id @default(uuid())
  fullName       String
  loanId         String
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  addressId      String?       @unique
  address        Address?      @relation(fields: [addressId], references: [id], onDelete: SetNull)
}

model LoanRepayment {
  id                   String    @id @default(uuid())
  loanId               String
  loan                 Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member    @relation(fields: [memberId], references: [id])
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

// Security and User Management
model User {
  id          String     @id @default(uuid())
  userId      String     @unique // From external auth provider
  email       String     @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
}

model Building {
  id       String @id @default(uuid())
  name     String @unique
  address  String
  managers User[]
}
