
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  userId      String   @unique // External auth provider user ID
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
}

model Building {
    id String @id @default(cuid())
    name String
    address String?
    managers User[]
}

model School {
  id          String   @id
  name        String   @unique
  address     String?
  contactPerson String?
  members     Member[]
}

model Member {
  id                     String                 @id @default(cuid())
  fullName               String
  email                  String                 @unique
  sex                    String // Male, Female, Other
  phoneNumber            String
  address                Address?
  emergencyContact       EmergencyContact?
  school                 School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId               String
  joinDate               DateTime
  savingsBalance         Float
  savingsAccountNumber   String?                @unique
  sharesCount            Int
  savingAccountType      SavingAccountType?     @relation(fields: [savingAccountTypeId], references: [id])
  savingAccountTypeId    String?
  expectedMonthlySaving  Float?
  shareCommitments       MemberShareCommitment[]
  savings                Saving[]
  shares                 Share[]
  dividends              Dividend[]
  loans                  Loan[]
  loanRepayments         LoanRepayment[]
  appliedServiceCharges  AppliedServiceCharge[]
  status                 String                 @default("active") // active, inactive
  closureDate            DateTime?
}

model MemberShareCommitment {
    id        String @id @default(cuid())
    member    Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId  String
    shareType ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
    shareTypeId String
    monthlyCommittedAmount Float
    
    @@unique([memberId, shareTypeId])
}

model SavingAccountType {
  id                         String   @id @default(cuid())
  name                       String   @unique
  interestRate               Float
  description                String?
  expectedMonthlyContribution Float?
  members                    Member[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  shareCommitments            MemberShareCommitment[]
}

model LoanType {
    id String @id @default(cuid())
    name String @unique
    interestRate Float // annual
    loanTerm Int // months
    repaymentFrequency String // monthly, quarterly, yearly
    nplInterestRate Float // Non-performing loan interest rate
    nplGracePeriodDays Int? @default(30)
    allowConcurrent Boolean @default(false)
    loans Loan[]
}

model ServiceChargeType {
    id String @id @default(cuid())
    name String @unique
    description String?
    amount Float
    frequency String // once, monthly, yearly
    appliedCharges AppliedServiceCharge[]
}

// Transactions
model Saving {
  id                   String   @id @default(cuid())
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId             String
  amount               Float
  date                 DateTime
  month                String
  transactionType      String // deposit, withdrawal
  status               String   @default("pending") // pending, approved, rejected
  notes                String?
  depositMode          String? // Cash, Bank, Wallet
  sourceName           String? // Bank name, wallet provider
  transactionReference String? // Bank transaction ID, etc.
  evidenceUrl          String?
}

model Share {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String? // Cash, Bank, Wallet
  sourceName               String? // Bank name, wallet provider
  transactionReference     String? // Bank transaction ID, etc.
  evidenceUrl              String?
}

model Dividend {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
}

model AppliedServiceCharge {
    id String @id @default(cuid())
    member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId String
    serviceChargeType ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
    serviceChargeTypeId String
    amountCharged Float
    dateApplied DateTime
    status String @default("pending") // pending, paid, waived
    notes String?
}

model Loan {
    id String @id @default(cuid())
    loanAccountNumber String? @unique
    member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId String
    loanType LoanType @relation(fields: [loanTypeId], references: [id])
    loanTypeId String
    principalAmount Float
    interestRate Float
    loanTerm Int // months
    repaymentFrequency String
    disbursementDate DateTime
    status String // pending, active, paid_off, rejected, overdue
    remainingBalance Float
    nextDueDate DateTime?
    notes String?
    monthlyRepaymentAmount Float?
    collaterals Collateral[]
    repayments LoanRepayment[]
}

model LoanRepayment {
    id String @id @default(cuid())
    loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
    loanId String
    member Member @relation(fields: [memberId], references: [id])
    memberId String
    amountPaid Float
    paymentDate DateTime
    notes String?
    depositMode          String? // Cash, Bank, Wallet
    sourceName           String? // Bank name, wallet provider
    transactionReference String? // Bank transaction ID, etc.
    evidenceUrl          String?
}

model Collateral {
    id String @id @default(cuid())
    loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
    loanId String
    fullName String
    organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String? @unique
    address Address?
}

model Address {
  id          String   @id @default(cuid())
  member      Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId    String?  @unique
  collateral  Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String? @unique
  city        String
  subCity     String
  wereda      String
  kebele      String?
  houseNumber String?
}

model EmergencyContact {
  id      String @id @default(cuid())
  member  Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String @unique
  name    String
  phone   String
}

model Organization {
    id String @id @default(cuid())
    name String
    address String?
    phone String?
    collateral Collateral?
}
