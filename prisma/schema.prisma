// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  userId      String     @unique
  email       String     @unique
  name        String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  buildings   Building[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Building {
  id        String   @id @default(cuid())
  name      String
  address   String
  managers  User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id            String   @id
  name          String
  address       String
  contactPerson String
  members       Member[]
}

model Member {
  id                      String                  @id
  fullName                String
  email                   String                  @unique
  sex                     String
  phoneNumber             String
  joinDate                DateTime
  salary                  Float?
  status                  String                  @default("active") // active, inactive, suspended
  closureDate             DateTime?
  school                  School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId                String
  address                 Address?
  emergencyContact        EmergencyContact?
  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  Saving                  Saving[]
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
}

model EmergencyContact {
  id       String  @id @default(cuid())
  name     String
  phone    String
  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String? @unique
}

model SavingAccountType {
  id                String                @id @default(cuid())
  name              String                @unique
  interestRate      Float
  description       String?
  contributionType  String                @default("FIXED") // FIXED, PERCENTAGE
  contributionValue Float                 @default(0)
  memberSavingAccounts MemberSavingAccount[]
}

model MemberSavingAccount {
  id                    String            @id @default(cuid())
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  savingAccountType     SavingAccountType @relation(fields: [savingAccountTypeId], references: [id])
  savingAccountTypeId   String
  accountNumber         String            @unique
  balance               Float             @default(0)
  expectedMonthlySaving Float             @default(0)

  @@unique([memberId, savingAccountTypeId])
}

model Saving {
  id                   String        @id @default(cuid())
  member               Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId             String
  amount               Float
  date                 DateTime
  month                String
  transactionType      String // deposit, withdrawal
  status               String        @default("pending") // pending, approved, rejected
  notes                String?
  depositMode          String? // Cash, Bank, Wallet
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId               String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  shareTypeId            String
  monthlyCommittedAmount Float

  @@unique([memberId, shareTypeId])
}

model Share {
  id                      String    @id @default(cuid())
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                String
  shareType               ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId             String
  count                   Int
  valuePerShare           Float
  allocationDate          DateTime
  status                  String    @default("pending")
  contributionAmount      Float?
  totalValueForAllocation Float?
  notes                   String?
  depositMode             String? // Cash, Bank, Wallet
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
}

model Dividend {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending")
  notes                    String?
}

model ServiceChargeType {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String // once, monthly, yearly
  appliedServiceCharge AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String            @default("pending") // pending, paid, waived
  notes               String?
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String  @default("monthly")
  nplInterestRate      Float   @default(0.18)
  nplGracePeriodDays   Int?    @default(30)
  allowConcurrent      Boolean @default(false)
  loans                Loan[]
}

model Loan {
  id                  String          @id @default(cuid())
  loanAccountNumber   String?         @unique
  member              Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  loanType            LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId          String
  principalAmount     Float
  interestRate        Float
  loanTerm            Int
  repaymentFrequency  String
  disbursementDate    DateTime
  status              String          @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance    Float
  nextDueDate         DateTime?
  notes               String?
  collaterals         Collateral[]
  repayments          LoanRepayment[]
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId               String
  member               Member   @relation(fields: [memberId], references: [id])
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model Collateral {
  id             String        @id @default(cuid())
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId         String
  fullName       String
  organization   Organization?
  address        Address?
}

model Organization {
  id           String      @id @default(cuid())
  name         String
  address      String
  phone        String
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
}
