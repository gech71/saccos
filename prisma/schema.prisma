// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE MODELS ---

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       UsersOnRoles[]
}

model User {
  id            String   @id @default(cuid())
  userId        String   @unique
  firstName     String
  lastName      String
  email         String   @unique
  phoneNumber   String   @unique
  password      String
  roles         UsersOnRoles[]
  member        Member?
}

model UsersOnRoles {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  @@id([userId, roleId])
}


model School {
  id            String   @id @default(cuid())
  name          String   @unique
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                      String                    @id @default(cuid())
  user                    User                      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                  String                    @unique
  school                  School                    @relation(fields: [schoolId], references: [id])
  schoolId                String
  joinDate                DateTime                  @default(now())
  savingsBalance          Float
  savingsAccountNumber    String                    @unique
  savingAccountType       SavingAccountType         @relation(fields: [savingAccountTypeId], references: [id])
  savingAccountTypeId     String
  expectedMonthlySaving   Float
  sharesCount             Int
  status                  String?                   @default("active") // e.g., active, inactive
  closureDate             DateTime?

  // Relations converted from composite types
  address                 Address?
  emergencyContact        EmergencyContact?
  shareCommitments        MemberShareCommitment[]
  savings                 Saving[]
  shares                  Share[]
  dividends               Dividend[]
  loans                   Loan[]
  appliedServiceCharges   AppliedServiceCharge[]
}

model SavingAccountType {
  id                          String   @id @default(cuid())
  name                        String   @unique
  interestRate                Float
  description                 String?
  expectedMonthlyContribution Float
  members                     Member[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  description          String?
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String // 'monthly', 'quarterly', 'yearly'
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean @default(false)
  loans                Loan[]
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // 'once', 'monthly', 'yearly'
  appliedServiceCharges AppliedServiceCharge[]
}

// --- TRANSACTIONAL MODELS ---

model Saving {
  id                     String    @id @default(cuid())
  member                 Member    @relation(fields: [memberId], references: [id])
  memberId               String
  amount                 Float
  date                   DateTime
  transactionType        String // 'deposit', 'withdrawal'
  status                 String // 'pending', 'approved', 'rejected'
  notes                  String?
  depositMode            String? // 'Cash', 'Bank', 'Wallet'
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
}

model Share {
  id                       String     @id @default(cuid())
  member                   Member     @relation(fields: [memberId], references: [id])
  memberId                 String
  shareType                ShareType  @relation(fields: [shareTypeId], references: [id])
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String // 'pending', 'approved', 'rejected'
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
}

model Dividend {
  id                         String   @id @default(cuid())
  member                     Member   @relation(fields: [memberId], references: [id])
  memberId                   String
  amount                     Float
  distributionDate           DateTime
  shareCountAtDistribution   Int
  status                     String // 'pending', 'approved', 'rejected'
  notes                      String?
}

model Loan {
  id                     String          @id @default(cuid())
  loanAccountNumber      String          @unique
  member                 Member          @relation(fields: [memberId], references: [id])
  memberId               String
  loanType               LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId             String
  principalAmount        Float
  interestRate           Float
  loanTerm               Int
  repaymentFrequency     String
  disbursementDate       DateTime
  status                 String // 'pending', 'active', 'paid_off', 'rejected', 'overdue'
  remainingBalance       Float
  nextDueDate            DateTime?
  notes                  String?
  monthlyRepaymentAmount Float?
  repayments             LoanRepayment[]
  collaterals            Collateral[]
}

model LoanRepayment {
  id                     String   @id @default(cuid())
  loan                   Loan     @relation(fields: [loanId], references: [id])
  loanId                 String
  amountPaid             Float
  paymentDate            DateTime
  notes                  String?
  depositMode            String?
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id])
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String // 'pending', 'paid', 'waived'
  notes               String?
}

// --- RELATED DATA MODELS (Converted from Composite Types) ---

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?

  member       Member?     @relation(fields: [memberId], references: [id])
  memberId     String?     @unique
  collateral   Collateral?
}

model EmergencyContact {
  id       String @id @default(cuid())
  name     String
  phone    String
  member   Member @relation(fields: [memberId], references: [id])
  memberId String @unique
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId            String
  monthlyCommittedAmount Float
  member                 Member    @relation(fields: [memberId], references: [id])
  memberId               String
}

model Organization {
  id      String     @id @default(cuid())
  name    String
  address String
  phone   String

  collaterals Collateral[]
}

model Collateral {
  id             String        @id @default(cuid())
  fullName       String
  loan           Loan          @relation(fields: [loanId], references: [id])
  loanId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  address        Address?      @relation(fields: [addressId], references: [id])
  addressId      String?       @unique
}
