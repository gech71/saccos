// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE MODELS ---

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       UsersOnRoles[]
}

model User {
  id      String         @id @default(cuid())
  userId  String         @unique // From external auth provider
  email   String         @unique
  roles   UsersOnRoles[]
}

model UsersOnRoles {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@id([userId, roleId])
}


model Member {
  id                      String                    @id @default(cuid())
  fullName                String
  email                   String                    @unique
  sex                     String // "Male", "Female", "Other"
  phoneNumber             String?
  schoolId                String
  joinDate                DateTime
  savingsBalance          Float
  savingsAccountNumber    String?                   @unique
  savingAccountTypeId     String?
  expectedMonthlySaving   Float?
  sharesCount             Int                       @default(0)
  status                  String                    @default("active") // "active", "inactive"
  closureDate             DateTime?

  // Relations
  school                  School                    @relation(fields: [schoolId], references: [id])
  savingAccountType       SavingAccountType?        @relation(fields: [savingAccountTypeId], references: [id])
  
  address                   Address?
  emergencyContact          EmergencyContact?
  
  // one to many
  shareCommitments          MemberShareCommitment[]
  savings                   Saving[]
  shares                    Share[]
  dividends                 Dividend[]
  loans                     Loan[]
  appliedServiceCharges     AppliedServiceCharge[]
}

model School {
  id            String   @id @default(cuid())
  name          String   @unique
  address       String?
  contactPerson String?
  members       Member[]
}

model SavingAccountType {
  id                          String   @id @default(cuid())
  name                        String   @unique
  interestRate                Float
  description                 String?
  expectedMonthlyContribution Float?
  members                     Member[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model LoanType {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String?
  interestRate       Float
  loanTerm           Int
  repaymentFrequency String // 'monthly', 'quarterly', 'yearly'
  nplInterestRate    Float
  nplGracePeriodDays Int?
  allowConcurrent    Boolean?
  loans              Loan[]
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // 'once', 'monthly', 'yearly'
  appliedServiceCharges AppliedServiceCharge[]
}


// --- TRANSACTIONAL MODELS ---

model Saving {
  id                     String   @id @default(cuid())
  memberId               String
  amount                 Float
  date                   DateTime
  month                  String
  transactionType        String // 'deposit', 'withdrawal'
  status                 String // 'pending', 'approved', 'rejected'
  notes                  String?
  depositMode            String? // 'Cash', 'Bank', 'Wallet'
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
  member                 Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Share {
  id                      String   @id @default(cuid())
  memberId                String
  shareTypeId             String
  count                   Int
  allocationDate          DateTime
  valuePerShare           Float
  status                  String // 'pending', 'approved', 'rejected'
  notes                   String?
  contributionAmount      Float?
  totalValueForAllocation Float?
  depositMode             String?
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
  member                  Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType               ShareType @relation(fields: [shareTypeId], references: [id])
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // 'pending', 'approved', 'rejected'
  notes                    String?
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  memberId            String
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String // 'pending', 'paid', 'waived'
  notes               String?
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
}


model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  memberId             String
  loanTypeId           String
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String // 'pending', 'active', 'paid_off', 'rejected', 'overdue'
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  monthlyRepaymentAmount Float?
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id])
  repayments           LoanRepayment[]
  collaterals          Collateral[]
}

model LoanRepayment {
  id                     String   @id @default(cuid())
  loanId                 String
  amountPaid             Float
  paymentDate            DateTime
  notes                  String?
  depositMode            String?
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
  loan                   Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

// --- RELATIONAL MODELS (Converted from Composite Types) ---

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
}

model EmergencyContact {
  id       String @id @default(cuid())
  name     String
  phone    String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String @unique
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  shareTypeId            String
  monthlyCommittedAmount Float
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])

  @@unique([memberId, shareTypeId])
}

model Collateral {
  id             String        @id @default(cuid())
  loanId         String
  fullName       String
  organization   Organization?
  organizationId String?       @unique
  address        Address?
  addressId      String?       @unique
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String     @id @default(cuid())
  name         String
  address      String
  phone        String
  collateral   Collateral @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String     @unique
}
