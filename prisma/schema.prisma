
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id            String    @id
  name          String
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                      String    @id @default(cuid())
  fullName                String
  email                   String    @unique
  sex                     String
  phoneNumber             String
  schoolId                String
  joinDate                DateTime
  salary                  Float?
  status                  String    @default("active") // active, inactive
  closureDate             DateTime?
  
  school                  School    @relation(fields: [schoolId], references: [id])
  
  addressId               String?   @unique
  address                 Address?  @relation(fields: [addressId], references: [id])
  
  emergencyContactId      String?   @unique
  emergencyContact        EmergencyContact? @relation(fields: [emergencyContactId], references: [id])

  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  savings                 Saving[]
  
  @@index([schoolId])
}

model Address {
  id              String      @id @default(cuid())
  city            String
  subCity         String
  wereda          String
  kebele          String?
  houseNumber     String?
  
  member          Member?
  collateral      Collateral?
}

model EmergencyContact {
  id      String   @id @default(cuid())
  name    String
  phone   String
  
  member  Member?
}

model SavingAccountType {
  id                String    @id @default(cuid())
  name              String
  interestRate      Float
  description       String?
  contributionType  String    @default("FIXED") // FIXED, PERCENTAGE
  contributionValue Float     @default(0)
  
  memberSavingAccounts MemberSavingAccount[]
}

model MemberSavingAccount {
  id                      String      @id @default(cuid())
  memberId                String
  savingAccountTypeId     String
  accountNumber           String      @unique
  balance                 Float       @default(0)
  expectedMonthlySaving   Float       @default(0)

  member                  Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountType       SavingAccountType @relation(fields: [savingAccountTypeId], references: [id])
  savings                 Saving[]

  @@index([memberId])
  @@index([savingAccountTypeId])
}


model ShareType {
  id                          String    @id @default(cuid())
  name                        String
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?

  shares            Share[]
  shareCommitments  MemberShareCommitment[]
}

model MemberShareCommitment {
  id                        String    @id @default(cuid())
  memberId                  String
  shareTypeId               String
  monthlyCommittedAmount    Float

  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType   ShareType @relation(fields: [shareTypeId], references: [id])

  @@unique([memberId, shareTypeId])
}

model Saving {
  id                      String    @id @default(cuid())
  amount                  Float
  date                    DateTime
  month                   String
  transactionType         String // deposit, withdrawal
  status                  String    @default("pending") // pending, approved, rejected
  notes                   String?
  
  depositMode             String? // Cash, Bank, Wallet
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
  
  memberId                String
  member                  Member              @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccountId   String
  memberSavingAccount     MemberSavingAccount @relation(fields: [memberSavingAccountId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([memberSavingAccountId])
}

model Share {
  id                      String   @id @default(cuid())
  count                   Int
  allocationDate          DateTime
  valuePerShare           Float
  status                  String   @default("pending") // pending, approved, rejected
  notes                   String?
  
  contributionAmount      Float?
  totalValueForAllocation Float?
  
  depositMode             String? // Cash, Bank, Wallet
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?

  memberId                String
  member                  Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId             String
  shareType               ShareType  @relation(fields: [shareTypeId], references: [id])

  @@index([memberId])
  @@index([shareTypeId])
}

model Dividend {
  id                        String   @id @default(cuid())
  amount                    Float
  distributionDate          DateTime
  shareCountAtDistribution  Int
  status                    String   @default("pending") // pending, approved, rejected
  notes                     String?

  memberId                  String
  member                    Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
}


model ServiceChargeType {
  id          String   @id @default(cuid())
  name        String
  description String?
  amount      Float
  frequency   String   // once, monthly, yearly

  appliedCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String   @id @default(cuid())
  amountCharged       Float
  dateApplied         DateTime
  status              String   @default("pending") // pending, paid, waived
  notes               String?

  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])

  @@index([memberId])
  @@index([serviceChargeTypeId])
}

model LoanType {
  id                      String    @id @default(cuid())
  name                    String
  interestRate            Float
  loanTerm                Int
  repaymentFrequency      String
  nplInterestRate         Float
  nplGracePeriodDays      Int?
  allowConcurrent         Boolean?  @default(false)
  loans                   Loan[]
}

model Loan {
  id                  String   @id @default(cuid())
  loanAccountNumber   String?  @unique
  principalAmount     Float
  interestRate        Float
  loanTerm            Int
  repaymentFrequency  String
  disbursementDate    DateTime
  status              String   @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance    Float
  nextDueDate         DateTime?
  notes               String?
  monthlyRepaymentAmount Float?
  
  memberId            String
  member              Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId          String
  loanType            LoanType @relation(fields: [loanTypeId], references: [id])
  
  repayments          LoanRepayment[]
  collaterals         Collateral[]

  @@index([memberId])
  @@index([loanTypeId])
}

model Collateral {
  id              String      @id @default(cuid())
  fullName        String
  
  loanId          String
  loan            Loan        @relation(fields: [loanId], references: [id], onDelete: Cascade)
  
  organizationId  String?     @unique
  organization    Organization? @relation(fields: [organizationId], references: [id])
  
  addressId       String?     @unique
  address         Address?    @relation(fields: [addressId], references: [id])

  @@index([loanId])
}

model Organization {
  id              String     @id @default(cuid())
  name            String
  address         String
  phone           String
  
  collateral      Collateral?
}

model LoanRepayment {
  id                      String   @id @default(cuid())
  amountPaid              Float
  paymentDate             DateTime
  notes                   String?

  depositMode             String? // Cash, Bank, Wallet
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
  
  loanId                  String
  loan                    Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId                String
  member                  Member   @relation(fields: [memberId], references: [id])
  
  @@index([loanId])
  @@index([memberId])
}

model User {
  id            String      @id @default(cuid())
  userId        String      @unique // The ID from the external authentication provider
  email         String      @unique
  name          String
  firstName     String?
  lastName      String?
  phoneNumber   String?
  
  roles         Role[]
  managedBuildings Building[] @relation("BuildingManagers")
}

model Role {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  permissions   String[]
  
  users         User[]
}

model Building {
  id            String   @id @default(cuid())
  name          String
  address       String?
  managers      User[]   @relation("BuildingManagers")
}
