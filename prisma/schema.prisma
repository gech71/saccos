// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id            String   @id
  name          String
  address       String?
  contactPerson String?
  members       Member[]
}

model User {
  id          String    @id @default(cuid())
  userId      String    @unique
  name        String?
  email       String    @unique
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[] @relation("BuildingManagers")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String // Stored as comma-separated string
  users       User[]
}

model Building {
  id      String @id @default(cuid())
  name    String
  address String?
  managers User[] @relation("BuildingManagers")
}

model Member {
  id                   String                  @id
  fullName             String
  email                String                  @unique
  sex                  String
  phoneNumber          String
  schoolId             String
  school               School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  joinDate             DateTime
  salary               Float?
  status               String                  @default("active")
  closureDate          DateTime?
  addressId            String?                 @unique
  address              Address?                @relation(fields: [addressId], references: [id], onDelete: SetNull)
  emergencyContactId   String?                 @unique
  emergencyContact     EmergencyContact?       @relation(fields: [emergencyContactId], references: [id], onDelete: SetNull)
  memberSavingAccounts MemberSavingAccount[]
  shareCommitments     MemberShareCommitment[]
  shares               Share[]
  dividends            Dividend[]
  appliedServiceCharges AppliedServiceCharge[]
  loans                Loan[]
  loanRepayments       LoanRepayment[]
  savings              Saving[]
}

model Address {
  id          String    @id @default(cuid())
  city        String?
  subCity     String?
  wereda      String?
  kebele      String?
  houseNumber String?
  member      Member?
  collateral  Collateral?
}

model EmergencyContact {
  id      String    @id @default(cuid())
  name    String?
  phone   String?
  member  Member?
}

model MemberSavingAccount {
  id                    String            @id @default(cuid())
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountTypeId   String
  savingAccountType     SavingAccountType @relation(fields: [savingAccountTypeId], references: [id], onDelete: Restrict)
  accountNumber         String            @unique
  expectedMonthlySaving Float?
  balance               Float             @default(0)
  createdAt             DateTime          @default(now())
  savings               Saving[]
}

model SavingAccountType {
  id                    String                @id @default(cuid())
  name                  String                @unique
  interestRate          Float                 @default(0)
  description           String?
  contributionType      String                @default("FIXED") // FIXED or PERCENTAGE
  contributionValue     Float                 @default(0)
  memberSavingAccounts  MemberSavingAccount[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId            String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Restrict)
  monthlyCommittedAmount Float
}

model ShareType {
  id                         String                  @id @default(cuid())
  name                       String                  @unique
  description                String?
  valuePerShare              Float
  expectedMonthlyContribution Float?
  shares                     Share[]
  memberShareCommitments     MemberShareCommitment[]
}

model Share {
  id                     String    @id @default(cuid())
  memberId               String
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId            String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Restrict)
  count                  Int
  allocationDate         DateTime
  valuePerShare          Float
  status                 String
  notes                  String?
  contributionAmount     Float?
  totalValueForAllocation Float?
  depositMode            String?
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String
  notes                    String?
}

model LoanType {
  id                   String   @id @default(cuid())
  name                 String   @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean  @default(false)
  loans                Loan[]
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id], onDelete: Restrict)
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  collaterals          Collateral[]
  loanRepayments       LoanRepayment[]
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id], onDelete: NoAction)
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model Collateral {
  id              String        @id @default(cuid())
  fullName        String
  organizationId  String?       @unique
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  addressId       String?       @unique
  address         Address?      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  loanId          String
  loan            Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model Organization {
  id         String     @id @default(cuid())
  name       String
  address    String?
  phone      String?
  collateral Collateral?
}

model Saving {
  id                      String              @id @default(cuid())
  memberId                String
  member                  Member              @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccountId   String?
  memberSavingAccount     MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)
  amount                  Float
  date                    DateTime
  month                   String
  transactionType         String
  status                  String
  notes                   String?
  depositMode             String?
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
}

model ServiceChargeType {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String
  appliedServiceCharge AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                    String            @id @default(cuid())
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId   String
  serviceChargeType     ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id], onDelete: Restrict)
  amountCharged         Float
  dateApplied           DateTime
  status                String
  notes                 String?
}
