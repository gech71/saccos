
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model School {
  id            String   @id @unique
  name          String
  address       String?
  contactPerson String?
  members       Member[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String
  users       User[]
}

model User {
  id          String     @id @default(cuid())
  userId      String     @unique
  email       String     @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[]
}

model Building {
  id       String  @id @default(cuid())
  name     String
  address  String?
  managers User[]
}

model Member {
  id                      String                    @id @unique
  fullName                String
  email                   String                    @unique
  sex                     String
  phoneNumber             String
  schoolId                String
  joinDate                DateTime
  salary                  Float?
  status                  String                    @default("active")
  closureDate             DateTime?
  addressId               String?                   @unique
  emergencyContactId      String?                   @unique
  school                  School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  address                 Address?                  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  emergencyContact        EmergencyContact?         @relation(fields: [emergencyContactId], references: [id], onDelete: Cascade)
  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  savings                 Saving[]

  @@index([schoolId])
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  member       Member?
  collateral   Collateral?
}

model EmergencyContact {
  id     String  @id @default(cuid())
  name   String
  phone  String
  member Member?
}

model SavingAccountType {
  id                   String                @id @default(cuid())
  name                 String                @unique
  interestRate         Float
  description          String?
  contributionType     String                @default("FIXED") // FIXED or PERCENTAGE
  contributionValue    Float                 @default(0)
  MemberSavingAccount  MemberSavingAccount[]
}

model MemberSavingAccount {
  id                  String             @id @default(cuid())
  memberId            String
  savingAccountTypeId String
  accountNumber       String             @unique
  balance             Float              @default(0)
  expectedMonthlySaving Float?
  createdAt           DateTime           @default(now())
  member              Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountType   SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id], onDelete: SetNull)
  Saving              Saving[]

  @@index([memberId])
  @@index([savingAccountTypeId])
}

model Saving {
  id                    String               @id @default(cuid())
  memberId              String
  memberSavingAccountId String?
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // 'deposit' or 'withdrawal'
  status                String               @default("pending") // pending, approved, rejected
  notes                 String?
  depositMode           String? // Cash, Bank, Wallet
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)

  @@index([memberId])
  @@index([status])
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  shareCommitments            MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  shareTypeId            String
  monthlyCommittedAmount Float
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)

  @@unique([memberId, shareTypeId])
}

model Share {
  id                       String    @id @default(cuid())
  memberId                 String
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  contributionAmount       Float?
  totalValueForAllocation  Float?
  status                   String    @default("pending") // pending, approved, rejected
  notes                    String?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
  loanId                   String?
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType                ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  loan                     Loan?     @relation(fields: [loanId], references: [id], onDelete: SetNull)

  @@index([memberId])
  @@index([shareTypeId])
  @@index([status])
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // once, monthly, yearly
  AppliedServiceCharge  AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  memberId            String
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String            @default("pending") // pending, paid, waived
  notes               String?
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([status])
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean? @default(false)
  loans                Loan[]
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  memberId             String
  loanTypeId           String
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String          @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  collaterals          Collateral[]
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id], onDelete: Cascade)
  repayments           LoanRepayment[]
  shares               Share[]

  @@index([memberId])
  @@index([status])
}

model Collateral {
  id             String        @id @default(cuid())
  fullName       String
  loanId         String
  organizationId String?       @unique
  addressId      String?       @unique
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  address        Address?      @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@index([loanId])
}

model Organization {
  id         String     @id @default(cuid())
  name       String
  address    String?
  phone      String?
  collateral Collateral?
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  member               Member   @relation(fields: [memberId], references: [id]) // No Cascade to avoid cycles on member delete

  @@index([loanId])
  @@index([memberId])
}
