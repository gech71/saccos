// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id            String          @id @default(cuid())
  name          String          @unique
  address       String?
  contactPerson String?
  members       Member[]
  schoolHistory SchoolHistory[]
}

model SchoolHistory {
  id         String   @id @default(cuid())
  memberId   String
  schoolId   String
  schoolName String // Denormalized for easier history tracking
  startDate  DateTime
  endDate    DateTime?
  reason     String?
  member     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  school     School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Member {
  id                      String                  @id @unique
  fullName                String
  email                   String?                 @unique
  sex                     String
  phoneNumber             String?                 @unique
  address                 Address?
  emergencyContact        EmergencyContact?
  schoolId                String
  joinDate                DateTime
  salary                  Float?                  @default(0)
  status                  String                  @default("active")
  closureDate             DateTime?
  school                  School                  @relation(fields: [schoolId], references: [id])
  savings                 Saving[]
  shares                  Share[]
  dividends               Dividend[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  appliedServiceCharges   AppliedServiceCharge[]
  memberSavingAccounts    MemberSavingAccount[]
  memberShareCommitments  MemberShareCommitment[]
  guaranteedLoans         LoanGuarantor[]         @relation("Guarantor")
  schoolHistory           SchoolHistory[]
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  memberId     String?     @unique
  collateralId String?     @unique
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  collateral   Collateral? @relation(fields: [collateralId], references: [id])
}

model EmergencyContact {
  id       String  @id @default(cuid())
  name     String
  phone    String
  memberId String? @unique
  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model SavingAccountType {
  id                    String                @id @default(cuid())
  name                  String                @unique
  description           String?
  interestRate          Float
  contributionType      String                @default("FIXED") // FIXED, PERCENTAGE
  contributionValue     Float
  memberSavingAccounts  MemberSavingAccount[]
}

model MemberSavingAccount {
  id                    String             @id @default(cuid())
  memberId              String
  savingAccountTypeId   String
  accountNumber         String             @unique
  balance               Float              @default(0)
  initialBalance        Float              @default(0)
  expectedMonthlySaving Float?
  member                Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountType     SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id], onDelete: SetNull)
  savings               Saving[]

  @@unique([memberId, savingAccountTypeId])
}

model Saving {
  id                    String               @id @default(cuid())
  memberId              String
  memberSavingAccountId String?
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // deposit, withdrawal
  status                String               @default("pending") // pending, approved, rejected
  notes                 String?
  depositMode           String?
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)
}

model ShareType {
  id                     String                  @id @default(cuid())
  name                   String                  @unique
  description            String?
  totalAmount            Float // Total cost of this share package
  paymentType            String                  @default("ONCE") // ONCE, INSTALLMENT
  numberOfInstallments   Int? // Number of months for installment
  memberShareCommitments MemberShareCommitment[]
}

model MemberShareCommitment {
  id                   String         @id @default(cuid())
  memberId             String
  shareTypeId          String
  totalCommittedAmount Float
  amountPaid           Float          @default(0)
  status               String         @default("ACTIVE") // ACTIVE, PAID_OFF, CANCELLED
  joinDate             DateTime       @default(now())
  member               Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType            ShareType      @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  payments             SharePayment[]

  @@unique([memberId, shareTypeId])
}

model SharePayment {
  id                      String                @id @default(cuid())
  commitmentId            String
  amount                  Float
  paymentDate             DateTime
  status                  String                @default("pending") // pending, approved, rejected
  notes                   String?
  depositMode             String?
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
  commitment              MemberShareCommitment @relation(fields: [commitmentId], references: [id], onDelete: Cascade)
}

// Legacy Share model, can be deprecated/removed later
model Share {
  id                   String   @id @default(cuid())
  memberId             String
  shareTypeId          String
  count                Int
  allocationDate       DateTime
  valuePerShare        Float
  status               String   @default("pending")
  notes                String?
  contributionAmount   Float?
  totalValueForAllocation Float?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanId               String?
  loan                 Loan?    @relation(fields: [loanId], references: [id])
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model LoanType {
  id                     String    @id @default(cuid())
  name                   String    @unique
  description            String?
  interestRate           Float
  minLoanAmount          Float
  maxLoanAmount          Float
  minRepaymentPeriod     Int
  maxRepaymentPeriod     Int
  repaymentFrequency     String // monthly, quarterly, yearly
  nplInterestRate        Float
  nplGracePeriodDays     Int?
  allowConcurrent        Boolean   @default(false)
  loans                  Loan[]
}

model Loan {
  id                     String          @id @default(cuid())
  loanAccountNumber      String?         @unique
  memberId               String
  loanTypeId             String
  principalAmount        Float
  interestRate           Float
  loanTerm               Int
  repaymentFrequency     String
  disbursementDate       DateTime
  status                 String          @default("pending")
  remainingBalance       Float
  nextDueDate            DateTime?
  notes                  String?
  purpose                String?
  serviceFee             Float?
  insuranceFee           Float?
  monthlyRepaymentAmount Float?
  member                 Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanType               LoanType        @relation(fields: [loanTypeId], references: [id], onDelete: Restrict)
  repayments             LoanRepayment[]
  shares                 Share[]
  collaterals            Collateral[]
  guarantors             LoanGuarantor[]
}

model LoanGuarantor {
  id          String @id @default(cuid())
  loanId      String
  guarantorId String
  loan        Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  guarantor   Member @relation(name: "Guarantor", fields: [guarantorId], references: [id], onDelete: Cascade)

  @@unique([loanId, guarantorId])
}

model Collateral {
  id           String  @id @default(cuid())
  loanId       String
  type         String // TITLE_DEED, VEHICLE, etc.
  description  String?
  documentUrl  String?
  address      Address?
  loan         Loan    @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String @id @default(cuid())
  name         String
  address      String
  phone        String
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
  interestPaid         Float
  principalPaid        Float
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // once, monthly, yearly
  appliedServiceCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  memberId            String
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String            @default("pending") // pending, paid, waived
  notes               String?
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id], onDelete: Restrict)
}

model User {
  id          String @id @default(cuid())
  userId      String @unique
  email       String @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[] @relation("UserRoles")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String
  users       User[]  @relation("UserRoles")
}
