
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model School {
  id              String          @id @default(cuid())
  name            String          @unique
  address         String?
  contactPerson   String?
  members         Member[]
  schoolHistories SchoolHistory[]
}

model Member {
  id                      String                  @id @unique
  fullName                String
  email                   String?                 @unique
  sex                     String
  phoneNumber             String?
  status                  String                  @default("active") // active, inactive
  joinDate                DateTime                @default(now())
  closureDate             DateTime?
  salary                  Float?
  school                  School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId                String
  address                 Address?
  emergencyContact        EmergencyContact?
  savings                 Saving[]
  memberSavingAccounts    MemberSavingAccount[]
  shares                  Share[]
  dividends               Dividend[]
  shareCommitments        MemberShareCommitment[]
  loans                   Loan[]
  repayments              LoanRepayment[]
  guaranteedLoans         LoanGuarantor[]
  appliedServiceCharges   AppliedServiceCharge[]
  schoolHistories         SchoolHistory[]
  user                    User?                   @relation(fields: [userId], references: [id])
  userId                  String?                 @unique
}

model Address {
  id            String      @id @default(cuid())
  city          String?
  subCity       String?
  wereda        String?
  kebele        String?
  houseNumber   String?
  member        Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId      String?     @unique
  collateral    Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId  String?     @unique
}

model EmergencyContact {
  id       String  @id @default(cuid())
  name     String
  phone    String
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String  @unique
}

model SavingAccountType {
  id                    String                @id @default(cuid())
  name                  String                @unique
  interestRate          Float                 @default(0) // Annual rate, e.g., 0.05 for 5%
  contributionType      String                @default("FIXED") // FIXED, PERCENTAGE
  contributionValue     Float                 @default(0)
  description           String?
  memberSavingAccounts  MemberSavingAccount[]
}

model MemberSavingAccount {
  id                      String             @id @default(cuid())
  member                  Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                String
  savingAccountType       SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id])
  savingAccountTypeId     String?
  accountNumber           String             @unique
  balance                 Float              @default(0)
  initialBalance          Float              @default(0)
  expectedMonthlySaving   Float?
  savings                 Saving[]

  @@unique([memberId, savingAccountTypeId])
}

model Saving {
  id                    String               @id @default(cuid())
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)
  memberSavingAccountId String?
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // deposit, withdrawal
  status                String               @default("pending") // pending, approved, rejected
  notes                 String?
  depositMode           String? // Cash, Bank, Wallet
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
  contributionFrequency       String                  @default("ONCE") // ONCE, MONTHLY
  contributionDurationMonths  Int?
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId               String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  shareTypeId            String
  monthlyCommittedAmount Float

  @@unique([memberId, shareTypeId])
}

model Share {
  id                       String    @id @default(cuid())
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String    @default("pending") // pending, approved, rejected
  contributionAmount       Float? // The monetary amount input for this allocation
  totalValueForAllocation  Float? // Actual value of shares (count * valuePerShare)
  notes                    String?
  depositMode              String? // Cash, Bank, Wallet
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
  loan                     Loan?     @relation(fields: [loanId], references: [id])
  loanId                   String?
}

model Dividend {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  interestRate         Float // Annual interest rate, e.g., 0.08 for 8%
  minLoanAmount        Float
  maxLoanAmount        Float
  minRepaymentPeriod   Int // in months
  maxRepaymentPeriod   Int // in months
  repaymentFrequency   String  @default("monthly") // monthly, quarterly, yearly
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean @default(false)
  loans                Loan[]
}

model Loan {
  id                     String          @id @default(cuid())
  loanAccountNumber      String?         @unique
  member                 Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId               String
  loanType               LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId             String
  principalAmount        Float
  interestRate           Float
  loanTerm               Int
  repaymentFrequency     String
  disbursementDate       DateTime
  status                 String          @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance       Float
  nextDueDate            DateTime?
  insuranceFee           Float?
  serviceFee             Float?
  purpose                String?
  notes                  String?
  monthlyRepaymentAmount Float?
  collaterals            Collateral[]
  guarantors             LoanGuarantor[]
  repayments             LoanRepayment[]
  shares                 Share[]
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId               String
  member               Member   @relation(fields: [memberId], references: [id], onDelete: NoAction)
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  principalPaid        Float
  interestPaid         Float
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model LoanGuarantor {
  guarantor   Member @relation(fields: [guarantorId], references: [id], onDelete: Cascade)
  guarantorId String
  loan        Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId      String

  @@id([guarantorId, loanId])
}

model Collateral {
  id           String   @id @default(cuid())
  loan         Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId       String
  type         String // GUARANTOR, TITLE_DEED
  description  String?
  documentUrl  String?
  address      Address?
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // once, monthly, yearly
  appliedServiceCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String            @default("pending") // pending, paid, waived
  notes               String?
}

model User {
  id          String   @id @default(cuid())
  userId      String   @unique // From external auth provider
  email       String   @unique
  name        String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]   @relation("UserRoles")
  member      Member[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  permissions String
  users       User[] @relation("UserRoles")
}

model Organization {
  id         String @id @default(cuid())
  name       String
  addressId  String
  address    Address @relation(fields: [addressId], references: [id])
  phone      String
}

model SchoolHistory {
  id         String   @id @default(cuid())
  member     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId   String
  school     School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId   String
  schoolName String
  startDate  DateTime
  endDate    DateTime?
  reason     String?
}
