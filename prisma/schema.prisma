// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User & Role Management
model User {
  id               String     @id @default(cuid())
  userId           String     @unique
  email            String     @unique
  name             String
  firstName        String?
  lastName         String?
  phoneNumber      String?
  roles            Role[]     @relation("UserRoles")
  managedBuildings Building[] @relation("ManagedBuildings")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime?  @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]   @relation("UserRoles")
}

model Building {
  id        String    @id @default(cuid())
  name      String
  address   String?
  managers  User[]    @relation("ManagedBuildings")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}


// Core Models
model School {
  id            String    @id @default(cuid())
  name          String    @unique
  address       String?
  contactPerson String?
  members       Member[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}


// Member & Related Info
model Member {
  id                      String                    @id @default(cuid())
  fullName                String
  email                   String                    @unique
  sex                     String
  phoneNumber             String
  schoolId                String
  joinDate                DateTime
  savingsBalance          Float
  savingsAccountNumber    String?                   @unique
  savingAccountTypeId     String?
  expectedMonthlySaving   Float?
  sharesCount             Int
  status                  String                    @default("active")
  closureDate             DateTime?

  school                  School                    @relation(fields: [schoolId], references: [id])
  savingAccountType       SavingAccountType?        @relation(fields: [savingAccountTypeId], references: [id])
  
  address                 Address?                  @relation(fields: [addressId], references: [id])
  addressId               String?                   @unique
  emergencyContact        EmergencyContact?         @relation(fields: [emergencyContactId], references: [id])
  emergencyContactId      String?                   @unique

  shareCommitments        MemberShareCommitment[]
  savings                 Saving[]
  shares                  Share[]
  dividends               Dividend[]
  loans                   Loan[]
  appliedServiceCharges   AppliedServiceCharge[]
  loanRepayments          LoanRepayment[]

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime?                 @updatedAt
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String?
  wereda       String?
  kebele       String?
  houseNumber  String?
  member       Member?     @relation(onDelete: Cascade)
  collateral   Collateral? @relation(onDelete: Cascade)
}

model EmergencyContact {
  id     String @id @default(cuid())
  name   String
  phone  String
  member Member? @relation(onDelete: Cascade)
}


// Financial Types
model SavingAccountType {
  id                          String    @id @default(cuid())
  name                        String    @unique
  interestRate                Float
  description                 String?
  expectedMonthlyContribution Float?
  members                     Member[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  valuePerShare               Float
  description                 String?
  expectedMonthlyContribution Float?
  shares                      Share[]
  shareCommitments            MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  shareTypeId            String
  monthlyCommittedAmount Float
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])
  @@unique([memberId, shareTypeId])
}

model LoanType {
  id                   String   @id @default(cuid())
  name                 String   @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  description          String?
  allowConcurrent      Boolean?
  loans                Loan[]
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  amount                Float
  frequency             String
  description           String?
  appliedServiceCharges AppliedServiceCharge[]
}

// Transactions & Records
model Saving {
  id                     String    @id @default(cuid())
  memberId               String
  amount                 Float
  date                   DateTime
  month                  String
  transactionType        String
  status                 String
  notes                  String?
  depositMode            String?
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Share {
  id                       String    @id @default(cuid())
  memberId                 String
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String
  notes                    String?
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Loan {
  id                     String          @id @default(cuid())
  loanAccountNumber      String?         @unique
  memberId               String
  loanTypeId             String
  principalAmount        Float
  interestRate           Float
  loanTerm               Int
  repaymentFrequency     String
  disbursementDate       DateTime
  status                 String
  remainingBalance       Float
  nextDueDate            DateTime?
  monthlyRepaymentAmount Float?
  notes                  String?
  member                 Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanType               LoanType        @relation(fields: [loanTypeId], references: [id])
  repayments             LoanRepayment[]
  collaterals            Collateral[]
}

model LoanRepayment {
  id                     String    @id @default(cuid())
  loanId                 String
  memberId               String
  amountPaid             Float
  paymentDate            DateTime
  notes                  String?
  depositMode            String?
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
  loan                   Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
  member                 Member    @relation(fields: [memberId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model Collateral {
  id               String        @id @default(cuid())
  fullName         String
  loanId           String
  organizationId   String?       @unique
  addressId        String?       @unique
  loan             Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  organization     Organization? @relation(fields: [organizationId], references: [id])
  address          Address?      @relation(fields: [addressId], references: [id])
}

model Organization {
  id           String      @id @default(cuid())
  name         String
  address      String?
  phone        String?
  collateral   Collateral?
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  memberId            String
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String
  notes               String?
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
}
