// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}


model User {
  id          String    @id @default(cuid())
  userId      String    @unique
  email       String    @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  permissions String
  users       User[]
}

model School {
  id              String    @id
  name            String
  address         String?
  contactPerson   String?
  members         Member[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Member {
  id                       String                  @id
  fullName                 String
  email                    String                  @unique
  sex                      String
  phoneNumber              String                  @unique
  joinDate                 DateTime
  salary                   Float?
  status                   String                  @default("active") // e.g., active, inactive, suspended
  closureDate              DateTime?

  schoolId                 String
  school                   School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  address                  Address?
  emergencyContact         EmergencyContact?

  memberSavingAccounts     MemberSavingAccount[]
  shareCommitments         MemberShareCommitment[]
  shares                   Share[]
  dividends                Dividend[]
  appliedServiceCharges    AppliedServiceCharge[]
  loans                    Loan[]
  loanRepayments           LoanRepayment[]
  savings                  Saving[]
}

model Address {
    id                  String      @id @default(cuid())
    city                String
    subCity             String
    wereda              String
    kebele              String?
    houseNumber         String?

    member              Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId            String?     @unique
    
    collateral          Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
    collateralId        String?     @unique
}

model EmergencyContact {
    id                  String      @id @default(cuid())
    name                String
    phone               String
    
    member              Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId            String?     @unique
}


model MemberSavingAccount {
  id                      String    @id @default(cuid())
  memberId                String
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountTypeId     String
  savingAccountType       SavingAccountType @relation(fields: [savingAccountTypeId], references: [id])
  
  accountNumber           String    @unique
  balance                 Float     @default(0)
  expectedMonthlySaving   Float?
  
  savings                 Saving[] // History of transactions for this account

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  @@unique([memberId, savingAccountTypeId])
}

model SavingAccountType {
  id                  String    @id @default(cuid())
  name                String    @unique
  interestRate        Float     // Annual interest rate, e.g., 0.05 for 5%
  description         String?
  contributionType    String    // FIXED or PERCENTAGE
  contributionValue   Float
  
  memberSavingAccounts MemberSavingAccount[]
}


model Saving {
  id                      String    @id @default(cuid())
  memberId                String
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccountId   String?
  memberSavingAccount     MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id])
  
  amount                  Float
  date                    DateTime
  month                   String // e.g., "January 2024"
  transactionType         String // 'deposit' or 'withdrawal'
  status                  String // 'pending', 'approved', 'rejected'
  notes                   String?
  depositMode             String? // 'Cash', 'Bank', 'Wallet'
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
}

model ShareType {
  id                           String    @id @default(cuid())
  name                         String    @unique
  description                  String?
  valuePerShare                Float
  expectedMonthlyContribution  Float?
  
  shares           Share[]
  shareCommitments MemberShareCommitment[]
}

model MemberShareCommitment {
  id                      String    @id @default(cuid())
  memberId                String
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId             String
  shareType               ShareType @relation(fields: [shareTypeId], references: [id])
  monthlyCommittedAmount  Float
  
  @@unique([memberId, shareTypeId])
}


model Share {
  id                      String     @id @default(cuid())
  memberId                String
  member                  Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId             String
  shareType               ShareType  @relation(fields: [shareTypeId], references: [id])
  count                   Int
  allocationDate          DateTime
  valuePerShare           Float
  contributionAmount      Float?
  totalValueForAllocation Float?
  status                  String
  notes                   String?
  depositMode             String?
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String
  notes                    String?
}

model LoanType {
  id                   String   @id @default(cuid())
  name                 String   @unique
  interestRate         Float    // Annual interest rate, e.g., 0.08 for 8%
  loanTerm             Int      // in months
  repaymentFrequency   String   // 'monthly', 'quarterly', 'yearly'
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean  @default(false)
  
  loans Loan[]
}

model Loan {
  id                  String   @id @default(cuid())
  loanAccountNumber   String?  @unique
  memberId            String
  member              Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId          String
  loanType            LoanType @relation(fields: [loanTypeId], references: [id])
  principalAmount     Float
  interestRate        Float
  loanTerm            Int
  repaymentFrequency  String
  disbursementDate    DateTime
  status              String   // 'pending', 'active', 'paid_off', 'rejected', 'overdue'
  remainingBalance    Float
  nextDueDate         DateTime?
  notes               String?
  
  collaterals      Collateral[]
  repayments       LoanRepayment[]
}

model Collateral {
  id              String      @id @default(cuid())
  fullName        String
  loanId          String
  loan            Loan        @relation(fields: [loanId], references: [id], onDelete: Cascade)
  
  organization    Organization?
  address         Address?
}

model Organization {
  id           String      @id @default(cuid())
  name         String
  address      String?
  phone        String?
  
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
}


model LoanRepayment {
  id                      String   @id @default(cuid())
  loanId                  String
  loan                    Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId                String
  member                  Member   @relation(fields: [memberId], references: [id])
  amountPaid              Float
  paymentDate             DateTime
  notes                   String?
  depositMode             String?
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
}


model ServiceChargeType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  amount      Float
  frequency   String // 'once', 'monthly', 'yearly'
  
  appliedCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                   String   @id @default(cuid())
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId  String
  serviceChargeType    ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  amountCharged        Float
  dateApplied          DateTime
  status               String // 'pending', 'paid', 'waived'
  notes                String?
}

model Building {
  id String @id @default(cuid())
  name String
  address String?
  managers User[]
}
