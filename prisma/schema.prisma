
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- AUTH MODELS ---
model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  users       User[]
}

model User {
  id            String   @id @default(cuid())
  userId        String   @unique
  firstName     String
  lastName      String
  email         String   @unique
  phoneNumber   String   @unique
  password      String
  roles         Role[]   @relation(fields: [roleIds], references: [id])
  roleIds       String[]

  memberProfile Member?
}

// --- CORE BUSINESS MODELS ---

model School {
  id            String   @id @default(cuid())
  name          String   @unique
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                        String   @id @default(cuid())
  user                      User     @relation(fields: [userId], references: [userId])
  userId                    String   @unique
  school                    School   @relation(fields: [schoolId], references: [id])
  schoolId                  String
  joinDate                  DateTime @default(now())
  savingsBalance            Float    @default(0.0)
  savingsAccountNumber      String?  @unique
  sharesCount               Int      @default(0)
  savingAccountTypeId       String?
  expectedMonthlySaving     Float?
  status                    String?  @default("active") // active, inactive
  closureDate               DateTime?

  // RELATIONS
  savingAccountType         SavingAccountType?      @relation(fields: [savingAccountTypeId], references: [id])
  
  address                   Address?                @relation("MemberAddress", fields: [addressId], references: [id])
  addressId                 String?                 @unique
  
  emergencyContact          EmergencyContact?       @relation("MemberEmergencyContact", fields: [emergencyContactId], references: [id])
  emergencyContactId        String?                 @unique

  savings                   Saving[]
  shares                    Share[]
  dividends                 Dividend[]
  loans                     Loan[]
  appliedServiceCharges     AppliedServiceCharge[]
  shareCommitments          MemberShareCommitment[]
}

model Saving {
  id                     String   @id @default(cuid())
  member                 Member   @relation(fields: [memberId], references: [id])
  memberId               String
  amount                 Float
  date                   DateTime
  transactionType        String // "deposit" or "withdrawal"
  status                 String // "pending", "approved", "rejected"
  notes                  String?
  depositMode            String? // "Cash", "Bank", "Wallet"
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
}

model Share {
  id                     String    @id @default(cuid())
  member                 Member    @relation(fields: [memberId], references: [id])
  memberId               String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId            String
  count                  Int
  allocationDate         DateTime
  valuePerShare          Float
  status                 String // "pending", "approved", "rejected"
  contributionAmount     Float?
  notes                  String?
}

model Dividend {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id])
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // "pending", "approved", "rejected"
}

model Loan {
  id                   String          @id @default(cuid())
  member               Member          @relation(fields: [memberId], references: [id])
  memberId             String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId           String
  principalAmount      Float
  disbursementDate     DateTime
  status               String // "pending", "active", "paid_off", "rejected", "overdue"
  remainingBalance     Float
  nextDueDate          DateTime?
  loanAccountNumber    String?         @unique
  notes                String?
  repayments           LoanRepayment[]
  collaterals          Collateral[]
}

model LoanRepayment {
  id          String   @id @default(cuid())
  loan        Loan     @relation(fields: [loanId], references: [id])
  loanId      String
  amountPaid  Float
  paymentDate DateTime
  notes       String?
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id])
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String // "pending", "paid", "waived"
}

// --- CONFIGURATION / TYPE MODELS ---

model SavingAccountType {
  id                          String   @id @default(cuid())
  name                        String   @unique
  interestRate                Float
  expectedMonthlyContribution Float?
  members                     Member[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  shareCommitments            MemberShareCommitment[]
}

model LoanType {
  id                 String  @id @default(cuid())
  name               String  @unique
  interestRate       Float
  loanTerm           Int
  repaymentFrequency String // "monthly", "quarterly", "yearly"
  nplInterestRate    Float
  allowConcurrent    Boolean @default(false)
  loans              Loan[]
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  amount                Float
  frequency             String // "once", "monthly", "yearly"
  appliedServiceCharges AppliedServiceCharge[]
}

// --- RELATIONAL MODELS (Converted from Composite Types) ---

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?

  member     Member?     @relation("MemberAddress")
  collateral Collateral? @relation("CollateralAddress")
}

model EmergencyContact {
  id      String @id @default(cuid())
  name    String
  phone   String
  member  Member? @relation("MemberEmergencyContact")
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  member                 Member    @relation(fields: [memberId], references: [id])
  memberId               String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId            String
  monthlyCommittedAmount Float
}

model Organization {
  id         String      @id @default(cuid())
  name       String
  address    String
  phone      String
  collateral Collateral?
}

model Collateral {
  id             String        @id @default(cuid())
  fullName       String
  loan           Loan          @relation(fields: [loanId], references: [id])
  loanId         String

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @unique

  address        Address?      @relation("CollateralAddress", fields: [addressId], references: [id])
  addressId      String?       @unique
}
