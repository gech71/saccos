datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model School {
  id            String          @id @default(cuid())
  name          String
  address       String?
  contactPerson String?
  members       Member[]
  schoolHistory SchoolHistory[]
}

model SchoolHistory {
  id         String    @id @default(cuid())
  memberId   String
  member     Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  schoolId   String
  school     School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolName String // Denormalized for easy history tracking
  startDate  DateTime
  endDate    DateTime?
  reason     String?
}

model Member {
  id                      String                    @id
  fullName                String
  email                   String?                   @unique
  sex                     String
  phoneNumber             String?
  joinDate                DateTime
  salary                  Float?
  status                  String                    @default("active") // active or inactive
  closureDate             DateTime?
  schoolId                String
  school                  School                    @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  address                 Address?
  emergencyContact        EmergencyContact?
  memberSavingAccounts    MemberSavingAccount[]
  memberShareCommitments  MemberShareCommitment[]
  savings                 Saving[]
  dividends               Dividend[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  appliedServiceCharges   AppliedServiceCharge[]
  guaranteedLoans         LoanGuarantor[]
  schoolHistory           SchoolHistory[]
  
  // These fields are deprecated or moved, kept for reference during transition
  savingsBalance          Float? // Use MemberSavingAccount.balance instead
  savingsAccountNumber    String? // Use MemberSavingAccount.accountNumber instead
  sharesCount             Int? // Use MemberShareCommitment instead
  savingAccountTypeId     String?
  expectedMonthlySaving   Float? // Use MemberSavingAccount.expectedMonthlySaving instead
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  memberId     String?     @unique
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id])
}

model EmergencyContact {
  id       String  @id @default(cuid())
  name     String
  phone    String
  memberId String? @unique
  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model SavingAccountType {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  interestRate         Float
  contributionType     String                @default("FIXED") // FIXED or PERCENTAGE
  contributionValue    Float                 @default(0)
  memberSavingAccounts MemberSavingAccount[]
}

model MemberSavingAccount {
  id                  String             @id @default(cuid())
  memberId            String
  member              Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountTypeId String
  savingAccountType   SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id], onDelete: Restrict)
  accountNumber       String             @unique
  balance             Float              @default(0)
  initialBalance      Float              @default(0)
  expectedMonthlySaving Float?
  createdAt           DateTime           @default(now())
  savings             Saving[]
}

model Saving {
  id                    String               @id @default(cuid())
  memberId              String
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccountId String?
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // deposit or withdrawal
  status                String // pending, approved, rejected
  notes                 String?
  depositMode           String?
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

model ShareType {
  id                   String                  @id @default(cuid())
  name                 String
  description          String?
  totalAmount          Float
  paymentType          String                  @default("ONCE") // ONCE or INSTALLMENT
  numberOfInstallments Int?
  monthlyPayment       Float?
  commitments          MemberShareCommitment[]
}

model MemberShareCommitment {
  id                   String       @id @default(cuid())
  memberId             String
  member               Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId          String
  shareType            ShareType    @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  totalCommittedAmount Float
  amountPaid           Float        @default(0)
  status               String       @default("ACTIVE") // ACTIVE, PAID_OFF, CANCELLED
  joinDate             DateTime     @default(now())
  payments             SharePayment[]

  @@unique([memberId, shareTypeId])
}

model SharePayment {
  id               String                @id @default(cuid())
  commitmentId     String
  commitment       MemberShareCommitment @relation(fields: [commitmentId], references: [id], onDelete: Cascade)
  amount           Float
  paymentDate      DateTime
  status           String                @default("pending") // pending, approved, rejected
  notes            String?
  depositMode      String?
  sourceName       String?
  transactionReference String?
  evidenceUrl      String?

  @@map("share_payments")
}

model Share {
  id                       String   @id @default(cuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId              String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String // pending, approved, rejected
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
}

model Dividend {
  id                         String   @id @default(cuid())
  memberId                   String
  member                     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                     Float
  distributionDate           DateTime
  shareCountAtDistribution   Int
  status                     String // pending, approved, rejected
  notes                      String?
}

model LoanType {
  id                 String  @id @default(cuid())
  name               String
  interestRate       Float
  minLoanAmount      Float
  maxLoanAmount      Float
  minRepaymentPeriod Int
  maxRepaymentPeriod Int
  repaymentFrequency String
  nplInterestRate    Float
  nplGracePeriodDays Int?
  allowConcurrent    Boolean @default(false)
  loans              Loan[]
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id], onDelete: Restrict)
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String
  remainingBalance     Float
  nextDueDate          DateTime?
  purpose              String?
  notes                String?
  insuranceFee         Float           @default(0)
  serviceFee           Float           @default(0)
  monthlyRepaymentAmount Float?
  repayments           LoanRepayment[]
  guarantors           LoanGuarantor[]
  collaterals          Collateral[]
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amountPaid           Float
  paymentDate          DateTime
  principalPaid        Float
  interestPaid         Float
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model LoanGuarantor {
  id          String @id @default(cuid())
  loanId      String
  loan        Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  guarantorId String
  guarantor   Member @relation(fields: [guarantorId], references: [id], onDelete: Cascade)

  @@unique([loanId, guarantorId])
}

model Collateral {
  id          String      @id @default(cuid())
  loanId      String
  loan        Loan        @relation(fields: [loanId], references: [id], onDelete: Cascade)
  type        String // 'TITLE_DEED' or other types
  description String?
  documentUrl String?
  address     Address?
}

model ServiceChargeType {
  id                  String                 @id @default(cuid())
  name                String
  description         String?
  amount              Float
  frequency           String // 'once', 'monthly', 'yearly'
  appliedServiceCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id], onDelete: Restrict)
  amountCharged       Float
  dateApplied         DateTime
  status              String // 'pending', 'paid', 'waived'
  notes               String?
}

model User {
  id          String  @id @default(cuid())
  userId      String  @unique // From external auth provider
  email       String  @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]  @relation("UserRoles")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String? // Comma-separated list
  users       User[]  @relation("UserRoles")
}

model Organization {
  id           String  @id @default(cuid())
  name         String
  address      String?
  phone        String?
  email        String?
  contactPerson String?
}
