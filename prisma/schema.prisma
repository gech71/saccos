// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// APP OPERATORS & AUTHENTICATION
model User {
  id          String   @id @default(cuid())
  userId      String   @unique
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  managedBuildings Building[] @relation("BuildingManager")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String  // Comma-separated list of permissions
  users       User[]
}

// CORE BUSINESS MODELS
model School {
  id            String    @id
  name          String
  address       String?
  contactPerson String?
  members       Member[]
  buildings     Building[]
}

model Building {
    id        String @id @default(cuid())
    name      String
    address   String?
    school    School @relation(fields: [schoolId], references: [id])
    schoolId  String
    managers  User[] @relation("BuildingManager")
}

model Member {
  id                      String                  @id
  fullName                String
  email                   String                  @unique
  sex                     String
  phoneNumber             String
  schoolId                String
  school                  School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  joinDate                DateTime
  salary                  Float?
  status                  String                  @default("active") // active, inactive
  closureDate             DateTime?

  // RELATIONS
  address                 Address?                @relation(fields: [addressId], references: [id])
  addressId               String?                 @unique
  emergencyContact        EmergencyContact?       @relation(fields: [emergencyContactId], references: [id])
  emergencyContactId      String?                 @unique
  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  savings                 Saving[]
}

model Address {
    id            String    @id @default(cuid())
    city          String
    subCity       String
    wereda        String
    kebele        String?
    houseNumber   String?
    member        Member?
    collaterals   Collateral[]
}

model EmergencyContact {
    id      String  @id @default(cuid())
    name    String
    phone   String
    member  Member?
}

// SAVINGS RELATED MODELS
model SavingAccountType {
  id                  String                @id @default(cuid())
  name                String                @unique
  interestRate        Float                 // Annual rate, e.g., 0.05 for 5%
  description         String?
  contributionType    String                @default("FIXED") // FIXED, PERCENTAGE
  contributionValue   Float                 @default(0)
  memberSavingAccounts MemberSavingAccount[]
}

model MemberSavingAccount {
    id                    String             @id @default(cuid())
    member                Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
    memberId              String
    savingAccountType     SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id])
    savingAccountTypeId   String?
    accountNumber         String             @unique
    balance               Float              @default(0)
    expectedMonthlySaving Float?
    savings               Saving[]

    @@unique([memberId, savingAccountTypeId])
}

model Saving {
  id                    String              @id @default(cuid())
  member                Member              @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id])
  memberSavingAccountId String?
  amount                Float
  date                  DateTime
  month                 String // e.g., "January 2024"
  transactionType       String // deposit, withdrawal
  status                String              @default("pending") // pending, approved, rejected
  notes                 String?
  depositMode           String? // Cash, Bank, Wallet
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

// SHARE & DIVIDEND RELATED MODELS
model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId               String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId            String
  monthlyCommittedAmount Float

  @@unique([memberId, shareTypeId])
}

model Share {
  id                      String    @id @default(cuid())
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                String
  shareType               ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId             String
  count                   Int
  allocationDate          DateTime
  valuePerShare           Float
  status                  String    @default("pending") // pending, approved, rejected
  notes                   String?
  contributionAmount      Float?
  totalValueForAllocation Float?
  depositMode             String?
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
}

model Dividend {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
}

// LOAN RELATED MODELS
model LoanType {
  id                   String   @id @default(cuid())
  name                 String   @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String // monthly, quarterly, yearly
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean? @default(false)
  loans                Loan[]
}

model Loan {
  id                 String          @id @default(cuid())
  loanAccountNumber  String?         @unique
  member             Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId           String
  loanType           LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId         String
  principalAmount    Float
  interestRate       Float
  loanTerm           Int
  repaymentFrequency String
  disbursementDate   DateTime
  status             String          @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance   Float
  nextDueDate        DateTime?
  notes              String?
  collaterals        Collateral[]
  repayments         LoanRepayment[]
}

model Collateral {
  id             String        @id @default(cuid())
  fullName       String
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @unique
  address        Address?      @relation(fields: [addressId], references: [id])
  addressId      String?       @unique
}

model Organization {
  id          String      @id @default(cuid())
  name        String
  address     String?
  phone       String?
  collateral  Collateral?
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId               String
  member               Member   @relation(fields: [memberId], references: [id])
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

// SERVICE CHARGE RELATED MODELS
model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // once, monthly, yearly
  appliedServiceCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String            @default("pending") // pending, paid, waived
  notes               String?
}
