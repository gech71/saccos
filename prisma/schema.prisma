// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]   @relation("UserRoles")
}

model User {
  id               String     @id @default(cuid())
  userId           String     @unique
  email            String     @unique
  name             String
  firstName        String?
  lastName         String?
  phoneNumber      String?
  roles            Role[]     @relation("UserRoles")
  managedBuildings Building[] @relation("ManagedBuildings")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime?  @updatedAt
}

model Building {
  id        String   @id @default(cuid())
  name      String
  address   String?
  managers  User[]   @relation("ManagedBuildings")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id            String   @id @default(cuid())
  name          String   @unique
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                      String                    @id @default(cuid())
  fullName                String
  email                   String                    @unique
  sex                     String
  phoneNumber             String
  schoolId                String
  school                  School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  joinDate                DateTime
  savingsBalance          Float                     @default(0)
  savingsAccountNumber    String?                   @unique
  savingAccountTypeId     String?
  savingAccountType       SavingAccountType?        @relation(fields: [savingAccountTypeId], references: [id])
  expectedMonthlySaving   Float?
  sharesCount             Int                       @default(0)
  status                  String                    @default("active") // active, inactive
  closureDate             DateTime?
  address                 Address?                  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId               String?                   @unique
  emergencyContact        EmergencyContact?         @relation(fields: [emergencyContactId], references: [id], onDelete: Cascade)
  emergencyContactId      String?                   @unique
  shareCommitments        MemberShareCommitment[]
  savings                 Saving[]
  shares                  Share[]
  dividends               Dividend[]
  loans                   Loan[]
  appliedServiceCharges   AppliedServiceCharge[]
  loanRepayments          LoanRepayment[]
}

model SavingAccountType {
  id                          String   @id @default(cuid())
  name                        String   @unique
  interestRate                Float
  description                 String?
  expectedMonthlyContribution Float?
  members                     Member[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shareCommitments            MemberShareCommitment[]
  shares                      Share[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId            String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  monthlyCommittedAmount Float

  @@unique([memberId, shareTypeId])
}

model Saving {
  id                   String   @id @default(cuid())
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount               Float
  date                 DateTime
  month                String
  transactionType      String // deposit, withdrawal
  status               String // pending, approved, rejected
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model Share {
  id                      String    @id @default(cuid())
  memberId                String
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId             String
  shareType               ShareType @relation(fields: [shareTypeId], references: [id])
  count                   Int
  allocationDate          DateTime
  valuePerShare           Float
  status                  String // pending, approved, rejected
  notes                   String?
  contributionAmount      Float?
  totalValueForAllocation Float?
  depositMode             String?
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // pending, approved, rejected
  notes                    String?
}

// Composite type replacements
model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String?
  wereda       String?
  kebele       String?
  houseNumber  String?
  member       Member?
  collateral   Collateral?
}

model EmergencyContact {
  id       String @id @default(cuid())
  name     String
  phone    String
  member   Member
}

model Organization {
  id         String     @id @default(cuid())
  name       String
  address    String?
  phone      String?
  collateral Collateral?
}

model Collateral {
  id             String        @id @default(cuid())
  fullName       String
  loanId         String
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?       @unique
  address        Address?      @relation(fields: [addressId], references: [id], onDelete: SetNull)
  addressId      String?       @unique
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  description          String?
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String // monthly, quarterly, yearly
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean @default(false)
  loans                Loan[]
}

model Loan {
  id                   String            @id @default(cuid())
  loanAccountNumber    String?           @unique
  memberId             String
  member               Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType          @relation(fields: [loanTypeId], references: [id])
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  collaterals          Collateral[]
  repayments           LoanRepayment[]
  appliedServiceCharge AppliedServiceCharge[]
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id])
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // once, monthly, yearly
  appliedServiceCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  amountCharged       Float
  dateApplied         DateTime
  status              String // pending, paid, waived
  notes               String?
  loanId              String?
  loan                Loan?             @relation(fields: [loanId], references: [id])
}
