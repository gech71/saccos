// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(cuid())
  userId           String      @unique
  email            String      @unique
  name             String
  firstName        String?
  lastName         String?
  phoneNumber      String?
  roles            Role[]      @relation("UserRoles")
  managedBuildings Building[]  @relation("ManagedBuildings")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?   @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]   @relation("UserRoles")
}

model Building {
  id        String   @id @default(cuid())
  name      String
  address   String?
  managers  User[]   @relation("ManagedBuildings")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model School {
  id              String    @id @default(cuid())
  name            String    @unique
  address         String?
  contactPerson   String?
  members         Member[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Member {
  id                      String                    @id @default(cuid())
  fullName                String
  email                   String                    @unique
  sex                     String
  phoneNumber             String
  schoolId                String
  school                  School                    @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  joinDate                DateTime
  savingsBalance          Float
  savingsAccountNumber    String?                   @unique
  savingAccountTypeId     String?
  savingAccountType       SavingAccountType?        @relation(fields: [savingAccountTypeId], references: [id])
  expectedMonthlySaving   Float?
  sharesCount             Int
  status                  String?                   @default("active") // active, inactive
  closureDate             DateTime?
  address                 Address?
  emergencyContact        EmergencyContact?
  shareCommitments        MemberShareCommitment[]
  savings                 Saving[]
  shares                  Share[]
  dividends               Dividend[]
  loans                   Loan[]
  appliedServiceCharges   AppliedServiceCharge[]
}

model Address {
  id           String @id @default(cuid())
  city         String
  subCity      String?
  wereda       String?
  kebele       String?
  houseNumber  String?

  // An Address must belong to either a Member or a Collateral, but not both.
  // A DB-level constraint could enforce this.
  memberId     String?     @unique
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id    String @id @default(cuid())
  name  String
  phone String

  memberId String @unique
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Organization {
  id           String     @id @default(cuid())
  name         String
  address      String?
  phone        String?
  collaterals  Collateral[]
}

model Collateral {
  id             String        @id @default(cuid())
  loanId         String
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  fullName       String
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  address        Address?
}

model SavingAccountType {
  id                          String   @id @default(cuid())
  name                        String   @unique
  interestRate                Float
  expectedMonthlyContribution Float?
  description                 String?
  members                     Member[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  valuePerShare               Float
  expectedMonthlyContribution Float?
  description                 String?
  shares                      Share[]
  shareCommitments            MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId            String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  monthlyCommittedAmount Float
}

model Saving {
  id                   String    @id @default(cuid())
  memberId             String
  member               Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount               Float
  date                 DateTime
  month                String
  transactionType      String // deposit, withdrawal
  status               String // pending, approved, rejected
  notes                String?
  depositMode          String? // Cash, Bank, Wallet
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model Share {
  id                     String    @id @default(cuid())
  memberId               String
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId            String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])
  count                  Int
  allocationDate         DateTime
  valuePerShare          Float
  status                 String // pending, approved, rejected
  notes                  String?
  contributionAmount     Float?
  totalValueForAllocation Float?
  depositMode            String? // Cash, Bank, Wallet
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // pending, approved, rejected
  notes                    String?
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  amount                Float
  frequency             String // once, monthly, yearly
  description           String?
  appliedServiceCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                    String            @id @default(cuid())
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId   String
  serviceChargeType     ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  amountCharged         Float
  dateApplied           DateTime
  status                String // pending, paid, waived
  notes                 String?
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String // monthly, quarterly, yearly
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean?
  loans                Loan[]
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id])
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String // pending, active, paid_off, rejected, overdue
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  monthlyRepaymentAmount Float?
  collaterals          Collateral[]
  repayments           LoanRepayment[]
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}
