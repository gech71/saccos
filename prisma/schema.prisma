// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  userId      String   @unique
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]
  buildings   Building[] @relation("BuildingManagers")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String
  users       User[]
}

model Building {
  id        String   @id @default(cuid())
  name      String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  managers  User[]   @relation("BuildingManagers")
}

model School {
  id            String   @id
  name          String
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                      String                  @id
  fullName                String
  email                   String                  @unique
  sex                     String
  phoneNumber             String
  school                  School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId                String
  joinDate                DateTime
  salary                  Float?
  status                  String                  @default("active") // active, inactive
  closureDate             DateTime?
  address                 Address?
  emergencyContact        EmergencyContact?
  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  savings                 Saving[]
}

model Address {
  id           String      @id @default(cuid())
  member       Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String      @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
  city         String
  subCity      String?
  wereda       String?
  kebele       String?
  houseNumber  String?
}

model EmergencyContact {
  id       String @id @default(cuid())
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String @unique
  name     String
  phone    String
}

// Configuration Tables
model SavingAccountType {
  id                   String                @id @default(cuid())
  name                 String                @unique
  interestRate         Float // Store as decimal, e.g., 0.05 for 5%
  description          String?
  contributionType     String                @default("FIXED") // FIXED, PERCENTAGE
  contributionValue    Float                 @default(0)
  memberSavingAccounts MemberSavingAccount[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model LoanType {
  id                   String   @id @default(cuid())
  name                 String   @unique
  interestRate         Float // Annual interest rate
  loanTerm             Int // in months
  repaymentFrequency   String // monthly, quarterly, yearly
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean? @default(false)
  loans                Loan[]
}

model ServiceChargeType {
  id               String                 @id @default(cuid())
  name             String                 @unique
  description      String?
  amount           Float
  frequency        String // once, monthly, yearly
  appliedCharges   AppliedServiceCharge[]
}

// Transactional Tables
model MemberSavingAccount {
  id                  String             @id @default(cuid())
  member              Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  savingAccountType   SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id])
  savingAccountTypeId String?
  accountNumber       String             @unique
  balance             Float
  expectedMonthlySaving Float?
  savings             Saving[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@unique([memberId, savingAccountTypeId])
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId               String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId            String
  monthlyCommittedAmount Float

  @@unique([memberId, shareTypeId])
}

model Saving {
  id                    String               @id @default(cuid())
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)
  memberSavingAccountId String?
  amount                Float
  date                  DateTime
  month                 String // e.g., "January 2024"
  transactionType       String // deposit, withdrawal
  status                String // pending, approved, rejected
  notes                 String?
  depositMode           String? // Cash, Bank, Wallet
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

model Share {
  id                       String    @id @default(cuid())
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId              String
  count                    Int // Number of shares allocated
  allocationDate           DateTime
  valuePerShare            Float // Value per share at the time of allocation
  status                   String // pending, approved, rejected
  notes                    String?
  contributionAmount       Float? // The monetary amount input for this specific allocation
  totalValueForAllocation  Float? // Actual value of shares allocated (count * valuePerShare)
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
}

model Dividend {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // pending, approved, rejected
  notes                    String?
}

model Loan {
  id                   String          @id @default(cuid())
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId             String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId           String
  principalAmount      Float
  interestRate         Float // Annual rate
  loanTerm             Int // In months
  repaymentFrequency   String // monthly, quarterly, yearly
  disbursementDate     DateTime
  status               String // pending, active, paid_off, rejected, overdue
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  loanAccountNumber    String?         @unique
  collaterals          Collateral[]
  repayments           LoanRepayment[]
}

model Collateral {
  id             String        @id @default(cuid())
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId         String
  fullName       String
  organization   Organization?
  address        Address?
}

model Organization {
  id           String     @id @default(cuid())
  collateral   Collateral @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String     @unique
  name         String
  address      String
  phone        String
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId               String
  member               Member   @relation(fields: [memberId], references: [id])
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String // pending, paid, waived
  notes               String?
}