
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id            String   @id @unique
  name          String
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                      String                    @id @unique
  fullName                String
  email                   String                    @unique
  sex                     String // "Male", "Female", "Other"
  phoneNumber             String
  joinDate                DateTime                  @default(now())
  salary                  Float?
  status                  String                    @default("active") // active, inactive
  closureDate             DateTime?
  schoolId                String
  school                  School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  address                 Address?
  emergencyContact        EmergencyContact?
  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  savings                 Saving[]
}

model Address {
  id               String       @id @default(cuid())
  city             String
  subCity          String
  wereda           String
  kebele           String?
  houseNumber      String?
  member           Member?      @relation(fields: [memberId], references: [id])
  memberId         String?      @unique
  collaterals      Collateral[]
}

model EmergencyContact {
  id        String  @id @default(cuid())
  name      String
  phone     String
  member    Member? @relation(fields: [memberId], references: [id])
  memberId  String? @unique
}

model SavingAccountType {
  id                   String                @id @default(cuid())
  name                 String                @unique
  interestRate         Float // e.g., 0.05 for 5%
  contributionType     String // "FIXED", "PERCENTAGE"
  contributionValue    Float
  description          String?
  memberSavingAccounts MemberSavingAccount[]
}

model MemberSavingAccount {
  id                   String            @id @default(cuid())
  memberId             String
  member               Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountTypeId  String
  savingAccountType    SavingAccountType @relation(fields: [savingAccountTypeId], references: [id], onDelete: Restrict)
  accountNumber        String            @unique
  balance              Float             @default(0)
  expectedMonthlySaving Float?
  createdAt            DateTime          @default(now())
  savings              Saving[]

  @@unique([memberId, savingAccountTypeId])
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId            String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)
  monthlyCommittedAmount Float

  @@unique([memberId, shareTypeId])
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // "once", "monthly", "yearly"
  appliedServiceCharges AppliedServiceCharge[]
}

model LoanType {
  id                   String   @id @default(cuid())
  name                 String   @unique
  interestRate         Float // Annual interest rate, e.g., 0.08 for 8%
  loanTerm             Int // in months
  repaymentFrequency   String // "monthly", "quarterly", "yearly"
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean?
  loans                Loan[]
}

model Saving {
  id                    String               @id @default(cuid())
  memberId              String
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccountId String?
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // "deposit", "withdrawal"
  status                String // "pending", "approved", "rejected"
  notes                 String?
  depositMode           String?
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

model Share {
  id                       String    @id @default(cuid())
  memberId                 String
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId              String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Restrict)
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String // "pending", "approved", "rejected"
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // "pending", "approved", "rejected"
  notes                    String?
}

model AppliedServiceCharge {
  id                    String            @id @default(cuid())
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId   String
  serviceChargeType     ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id], onDelete: Restrict)
  amountCharged         Float
  dateApplied           DateTime
  status                String // "pending", "paid", "waived"
  notes                 String?
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id], onDelete: Restrict)
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String // "pending", "active", "paid_off", "rejected", "overdue"
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  collaterals          Collateral[]
  repayments           LoanRepayment[]
}

model Collateral {
  id               String        @id @default(cuid())
  loanId           String
  loan             Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  fullName         String
  organization     Organization?
  address          Address?
}

model Organization {
  id           String     @id @default(cuid())
  collateralId String     @unique
  collateral   Collateral @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  name         String
  address      String?
  phone        String?
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model User {
  id          String   @id @default(cuid())
  userId      String   @unique // This will store the ID from the external auth provider
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[] @relation("BuildingManagers")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String
  users       User[]
}

model Building {
  id        String @id @default(cuid())
  name      String
  address   String?
  managers  User[] @relation("BuildingManagers")
}
