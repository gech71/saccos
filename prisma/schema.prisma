// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(cuid())
  userId      String   @unique
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String // Comma-separated list of permissions
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model School {
  id             String        @id
  name           String
  address        String?
  contactPerson  String?
  members        Member[]
  schoolHistory  SchoolHistory[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model SchoolHistory {
  id         String   @id @default(cuid())
  member     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId   String
  school     School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId   String
  schoolName String // Denormalized for historical accuracy
  startDate  DateTime
  endDate    DateTime?
  reason     String?
}

model Member {
  id                     String                  @id
  fullName               String
  email                  String?                 @unique
  sex                    String?
  phoneNumber            String?
  salary                 Float?
  joinDate               DateTime
  status                 String                  @default("active") // active, inactive
  closureDate            DateTime?
  school                 School                  @relation(fields: [schoolId], references: [id])
  schoolId               String
  address                Address?
  emergencyContact       EmergencyContact?
  savings                Saving[]
  memberSavingAccounts   MemberSavingAccount[]
  shares                 Share[]
  dividends              Dividend[]
  loansAsBorrower        Loan[]
  loanRepayments         LoanRepayment[]
  shareCommitments       MemberShareCommitment[]
  appliedServiceCharges  AppliedServiceCharge[]
  guaranteedLoans        LoanGuarantor[]         @relation("GuarantorLoans")
  schoolHistory          SchoolHistory[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
}

model EmergencyContact {
  id       String  @id @default(cuid())
  name     String
  phone    String
  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String? @unique
}

model Organization {
  id      String      @id @default(cuid())
  name    String
  address String
  phone   String
  Collateral Collateral?
}

// SAVINGS RELATED MODELS
model SavingAccountType {
  id                   String                @id @default(cuid())
  name                 String                @unique
  interestRate         Float
  description          String?
  contributionType     String                @default("FIXED") // FIXED, PERCENTAGE
  contributionValue    Float
  memberSavingAccounts MemberSavingAccount[]
}

model MemberSavingAccount {
  id                    String            @id @default(cuid())
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  savingAccountType     SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id])
  savingAccountTypeId   String?
  accountNumber         String            @unique
  balance               Float             @default(0)
  initialBalance        Float             @default(0)
  expectedMonthlySaving Float             @default(0)
  savings               Saving[]
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Saving {
  id                    String               @id @default(cuid())
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)
  memberSavingAccountId String?
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // deposit, withdrawal
  status                String // pending, approved, rejected
  notes                 String?
  depositMode           String? // Cash, Bank, Wallet
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

// SHARES & DIVIDENDS RELATED MODELS
model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId               String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId            String
  monthlyCommittedAmount Float
  @@unique([memberId, shareTypeId])
}

model Share {
  id                       String    @id @default(cuid())
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String // pending, approved, rejected
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String? // Cash, Bank, Wallet
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
}

model Dividend {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // pending, approved, rejected
  notes                    String?
}

// LOANS RELATED MODELS
model LoanType {
  id                 String  @id @default(cuid())
  name               String  @unique
  minLoanAmount      Float
  maxLoanAmount      Float
  minRepaymentPeriod Int
  maxRepaymentPeriod Int
  repaymentFrequency String // monthly, quarterly, yearly
  interestRate       Float
  nplInterestRate    Float
  nplGracePeriodDays Int     @default(30)
  allowConcurrent    Boolean @default(false)
  loans              Loan[]
}

model Loan {
  id                     String          @id @default(cuid())
  loanAccountNumber      String?         @unique
  member                 Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId               String
  loanType               LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId             String
  principalAmount        Float
  interestRate           Float
  loanTerm               Int
  repaymentFrequency     String
  disbursementDate       DateTime
  status                 String
  remainingBalance       Float
  nextDueDate            DateTime?
  insuranceFee           Float?
  serviceFee             Float?
  monthlyRepaymentAmount Float?
  purpose                String?
  notes                  String?
  repayments             LoanRepayment[]
  guarantors             LoanGuarantor[]
  collaterals            Collateral[]
}

model LoanRepayment {
  id                   String  @id @default(cuid())
  loan                 Loan    @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId               String
  member               Member  @relation(fields: [memberId], references: [id])
  memberId             String
  amountPaid           Float
  interestPaid         Float?
  principalPaid        Float?
  paymentDate          DateTime
  notes                String?
  depositMode          String? // Cash, Bank, Wallet
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model LoanGuarantor {
  loan        Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId      String
  guarantor   Member @relation("GuarantorLoans", fields: [guarantorId], references: [id], onDelete: Cascade)
  guarantorId String

  @@id([loanId, guarantorId])
}

model Collateral {
  id          String   @id @default(cuid())
  type        String // GUARANTOR, TITLE_DEED
  description String?
  documentUrl String?
  address     Address?
  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId String? @unique
  loan Loan? @relation(fields: [loanId], references: [id])
  loanId String? @unique
}

// SERVICE CHARGES RELATED MODELS
model ServiceChargeType {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String // once, monthly, yearly
  appliedServiceCharge AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String // pending, paid, waived
  notes               String?
}
