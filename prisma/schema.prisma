// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTHENTICATION MODELS

model User {
  id          String   @id @default(cuid())
  userId      String   @unique
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[] @relation("BuildingManagers")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       User[]
  permissions String[]
}

// CORE BUSINESS MODELS

model School {
  id            String   @id
  name          String   @unique
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                      String                    @id
  fullName                String
  email                   String                    @unique
  sex                     String
  phoneNumber             String
  joinDate                DateTime
  salary                  Float?
  status                  String                    @default("active") // active, inactive
  closureDate             DateTime?
  schoolId                String
  school                  School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  address                 Address?
  emergencyContact        EmergencyContact?
  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  savings                 Saving[]
}

model Address {
  id           String     @id @default(cuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  memberId     String?    @unique
  member       Member?    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  collateralId String?    @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id       String @id @default(cuid())
  name     String
  phone    String
  memberId String @unique
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

// FINANCIAL CONFIGURATION MODELS

model SavingAccountType {
  id                   String                @id @default(cuid())
  name                 String                @unique
  interestRate         Float
  description          String?
  contributionType     String // FIXED or PERCENTAGE
  contributionValue    Float
  memberSavingAccounts MemberSavingAccount[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model LoanType {
  id                   String   @id @default(cuid())
  name                 String   @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String // monthly, quarterly, yearly
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean?
  loans                Loan[]
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String // once, monthly, yearly
  appliedServiceCharges AppliedServiceCharge[]
}


// FINANCIAL TRANSACTION & MAPPING MODELS

model MemberSavingAccount {
  id                  String             @id @default(cuid())
  memberId            String
  savingAccountTypeId String
  accountNumber       String             @unique
  balance             Float              @default(0)
  expectedMonthlySaving Float?
  member              Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountType   SavingAccountType  @relation(fields: [savingAccountTypeId], references: [id])
  savings             Saving[]

  @@unique([memberId, savingAccountTypeId])
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  shareTypeId            String
  monthlyCommittedAmount Float
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])

  @@unique([memberId, shareTypeId])
}


model Saving {
  id                    String              @id @default(cuid())
  memberId              String
  member                Member              @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccountId String
  memberSavingAccount   MemberSavingAccount @relation(fields: [memberSavingAccountId], references: [id], onDelete: Cascade)
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // deposit or withdrawal
  status                String              @default("pending") // pending, approved, rejected
  notes                 String?
  depositMode           String?
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

model Share {
  id                       String    @id @default(cuid())
  memberId                 String
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String    @default("pending") // pending, approved, rejected
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
  loanId                   String?   @unique
  loan                     Loan?     @relation(fields: [loanId], references: [id])
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model AppliedServiceCharge {
  id                    String            @id @default(cuid())
  memberId              String
  serviceChargeTypeId   String
  amountCharged         Float
  dateApplied           DateTime
  status                String            @default("pending") // pending, paid, waived
  notes                 String?
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeType     ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
}

model Loan {
  id                    String          @id @default(cuid())
  loanAccountNumber     String?         @unique
  memberId              String
  loanTypeId            String
  principalAmount       Float
  interestRate          Float
  loanTerm              Int
  repaymentFrequency    String
  disbursementDate      DateTime
  status                String          @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance      Float
  nextDueDate           DateTime?
  notes                 String?
  member                Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanType              LoanType        @relation(fields: [loanTypeId], references: [id])
  collaterals           Collateral[]
  repayments            LoanRepayment[]
  shares                Share?
}

model LoanRepayment {
  id                   String    @id @default(cuid())
  loanId               String
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
  member               Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loan                 Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model Collateral {
  id             String        @id @default(cuid())
  fullName       String
  loanId         String
  organizationId String?       @unique
  addressId      String?       @unique
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  organization   Organization?
  address        Address?
}

model Organization {
  id           String     @id @default(cuid())
  name         String
  address      String?
  phone        String?
  collateralId String     @unique
  collateral   Collateral @relation(fields: [collateralId], references: [id], onDelete: Cascade)
}

model Building {
  id       String   @id @default(cuid())
  name     String   @unique
  address  String?
  managers User[]   @relation("BuildingManagers")
}
