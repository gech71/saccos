
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  userId      String   @unique // External auth provider user ID
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]   @relation("UserRoles")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String   // Comma-separated list of permissions
  users       User[]   @relation("UserRoles")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model School {
  id             String          @id @default(cuid())
  name           String
  address        String?
  contactPerson  String?
  members        Member[]
  schoolHistory  SchoolHistory[]
}

model Member {
  id                      String                   @id @default(cuid())
  fullName                String
  email                   String                   @unique
  sex                     String // "Male" or "Female"
  phoneNumber             String?
  address                 Address?
  emergencyContact        EmergencyContact?
  school                  School                   @relation(fields: [schoolId], references: [id])
  schoolId                String
  schoolHistory           SchoolHistory[]
  joinDate                DateTime                 @default(now())
  status                  String                   @default("active") // "active", "inactive", "suspended"
  closureDate             DateTime?
  salary                  Float?
  savings                 Saving[]
  memberSavingAccounts    MemberSavingAccount[]
  shares                  Share[]
  dividends               Dividend[]
  memberShareCommitments  MemberShareCommitment[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  guaranteedLoans         LoanGuarantor[]
  loanRepayments          LoanRepayment[]
}

model SchoolHistory {
  id          String    @id @default(cuid())
  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId    String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  schoolName  String
  startDate   DateTime
  endDate     DateTime?
  reason      String?
}

model Address {
  id           String      @id @default(cuid())
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
}

model EmergencyContact {
  id       String @id @default(cuid())
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String @unique
  name     String
  phone    String
}

model Organization {
  id           String     @id @default(cuid())
  name         String
  address      String
  phone        String
  collateral   Collateral @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId String     @unique
}

model SavingAccountType {
  id                    String                @id @default(cuid())
  name                  String                @unique
  interestRate          Float                 @default(0.0) // As decimal, e.g., 0.05 for 5%
  description           String?
  contributionType      ContributionType      @default(FIXED)
  contributionValue     Float                 @default(0) // Fixed amount or percentage value
  memberSavingAccounts  MemberSavingAccount[]
}

enum ContributionType {
  FIXED
  PERCENTAGE
}

model MemberSavingAccount {
  id                  String             @id @default(cuid())
  member              Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  savingAccountType   SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id])
  savingAccountTypeId String?
  accountNumber       String             @unique
  balance             Float              @default(0)
  initialBalance      Float              @default(0)
  createdAt           DateTime           @default(now())
  expectedMonthlySaving Float?
  savings             Saving[]
}

model Saving {
  id                    String               @id @default(cuid())
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id])
  memberSavingAccountId String?
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // "deposit" or "withdrawal"
  status                String               @default("pending") // "pending", "approved", "rejected"
  notes                 String?
  depositMode           String? // "Cash", "Bank", "Wallet"
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

model ShareType {
  id                     String                   @id @default(cuid())
  name                   String                   @unique
  description            String?
  totalAmount            Float
  paymentType            SharePaymentType         @default(ONCE)
  numberOfInstallments   Int?
  monthlyPayment         Float?
  shares                 Share[]
  memberShareCommitments MemberShareCommitment[]
}

enum SharePaymentType {
  ONCE
  INSTALLMENT
}

model MemberShareCommitment {
  id                   String         @id @default(cuid())
  member               Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId             String
  shareType            ShareType      @relation(fields: [shareTypeId], references: [id])
  shareTypeId          String
  joinDate             DateTime       @default(now())
  totalCommittedAmount Float
  amountPaid           Float          @default(0)
  status               CommitmentStatus @default(ACTIVE)
  payments             SharePayment[]
}

enum CommitmentStatus {
  ACTIVE
  PAID_OFF
  CANCELLED
}

model SharePayment {
  id                   String                @id @default(cuid())
  commitment           MemberShareCommitment @relation(fields: [commitmentId], references: [id], onDelete: Cascade)
  commitmentId         String
  amount               Float
  paymentDate          DateTime
  status               String                @default("pending") // "pending", "approved", "rejected"
  notes                String?
  depositMode          String? // "Cash", "Bank", "Wallet"
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model Share {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String     @default("pending") // "pending", "approved", "rejected"
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
}

model Dividend {
  id                       String   @id @default(cuid())
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // "pending", "approved", "rejected"
  notes                    String?
}

model ServiceChargeType {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String // "once", "monthly", "yearly"
  appliedServiceCharge AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String            @default("pending") // "pending", "paid", "waived"
  notes               String?
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  interestRate         Float // Annual interest rate, e.g., 0.08 for 8%
  minLoanAmount        Float
  maxLoanAmount        Float
  minRepaymentPeriod   Int // in months
  maxRepaymentPeriod   Int // in months
  repaymentFrequency   String // "monthly", "quarterly", "yearly"
  nplInterestRate      Float // Non-Performing Loan interest rate, annual
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean @default(false)
  loans                Loan[]
}

model Loan {
  id                    String          @id @default(cuid())
  member                Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  loanType              LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId            String
  loanAccountNumber     String?         @unique
  principalAmount       Float
  interestRate          Float // Annual rate at time of loan
  loanTerm              Int // in months
  repaymentFrequency    String
  disbursementDate      DateTime
  status                String          @default("pending") // "pending", "active", "paid_off", "rejected", "overdue"
  remainingBalance      Float
  nextDueDate           DateTime?
  notes                 String?
  purpose               String?
  monthlyRepaymentAmount Float?
  serviceFee            Float?
  insuranceFee          Float?
  collaterals           Collateral[]
  guarantors            LoanGuarantor[]
  repayments            LoanRepayment[]
}

model Collateral {
  id            String    @id @default(cuid())
  loan          Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId        String
  type          String // "GUARANTOR", "TITLE_DEED"
  description   String?
  documentUrl   String?
  address       Address?
  organization  Organization?
}

model LoanGuarantor {
  id          String @id @default(cuid())
  loan        Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId      String
  guarantor   Member @relation(fields: [guarantorId], references: [id], onDelete: Cascade)
  guarantorId String

  @@unique([loanId, guarantorId])
}

model LoanRepayment {
  id                   String  @id @default(cuid())
  loan                 Loan    @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId               String
  member               Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId             String
  amountPaid           Float
  principalPaid        Float
  interestPaid         Float
  paymentDate          DateTime
  notes                String?
  depositMode          String? // "Cash", "Bank", "Wallet"
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}
