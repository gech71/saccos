// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model School {
  id            String          @id @default(cuid())
  name          String          @unique
  address       String?
  contactPerson String?
  members       Member[]
  schoolHistory SchoolHistory[]
}

model Member {
  id                      String                  @id @default(cuid())
  fullName                String
  email                   String?                 @unique
  sex                     String
  phoneNumber             String?
  address                 Address?
  emergencyContact        EmergencyContact?
  school                  School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId                String
  joinDate                DateTime                @default(now())
  salary                  Float?
  savingsBalance          Float                   @default(0)
  status                  String                  @default("active") // active, inactive
  closureDate             DateTime?
  memberSavingAccounts    MemberSavingAccount[]
  savings                 Saving[]
  shares                  Share[]
  dividends               Dividend[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  appliedServiceCharges   AppliedServiceCharge[]
  memberShareCommitments  MemberShareCommitment[]
  guaranteedLoans         LoanGuarantor[]         @relation("Guarantor")
  schoolHistory           SchoolHistory[]
  savingAccountTypeId     String?
}

model Address {
  id            String  @id @default(cuid())
  city          String?
  subCity       String?
  wereda        String?
  kebele        String?
  houseNumber   String?
  member        Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId      String? @unique
  collateral    Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  collateralId  String? @unique
}

model EmergencyContact {
  id        String  @id @default(cuid())
  name      String
  phone     String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String  @unique
}

model SchoolHistory {
  id          String    @id @default(cuid())
  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId    String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  schoolName  String
  startDate   DateTime
  endDate     DateTime?
  reason      String?
}

// SAVINGS RELATED MODELS
model SavingAccountType {
  id                   String                @id @default(cuid())
  name                 String                @unique
  interestRate         Float // e.g., 0.05 for 5%
  description          String?
  contributionType     String                @default("FIXED") // FIXED or PERCENTAGE
  contributionValue    Float                 @default(0)
  memberSavingAccounts MemberSavingAccount[]
}

model MemberSavingAccount {
  id                    String             @id @default(cuid())
  member                Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  savingAccountType     SavingAccountType? @relation(fields: [savingAccountTypeId], references: [id])
  savingAccountTypeId   String?
  accountNumber         String             @unique
  balance               Float              @default(0)
  initialBalance        Float              @default(0)
  expectedMonthlySaving Float?
  savings               Saving[]
}

model Saving {
  id                    String               @id @default(cuid())
  member                Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId              String
  memberSavingAccount   MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id])
  memberSavingAccountId String?
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // deposit, withdrawal
  status                String               @default("pending") // pending, approved, rejected
  notes                 String?
  depositMode           String? // Cash, Bank, Wallet
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

// SHARES & DIVIDENDS RELATED MODELS
model ShareType {
  id                     String                  @id @default(cuid())
  name                   String                  @unique
  description            String?
  totalAmount            Float
  paymentType            SharePaymentType        @default(ONCE)
  numberOfInstallments   Int?
  monthlyPayment         Float?
  commitments            MemberShareCommitment[]
  shares                 Share[]
}

enum SharePaymentType {
  ONCE
  INSTALLMENT
}

model MemberShareCommitment {
  id                   String          @id @default(cuid())
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId             String
  shareType            ShareType       @relation(fields: [shareTypeId], references: [id])
  shareTypeId          String
  joinDate             DateTime        @default(now())
  totalCommittedAmount Float
  amountPaid           Float           @default(0)
  status               String          @default("ACTIVE") // ACTIVE, PAID_OFF, CANCELLED
  payments             SharePayment[]
}

model SharePayment {
  id                   String                @id @default(cuid())
  commitment           MemberShareCommitment @relation(fields: [commitmentId], references: [id], onDelete: Cascade)
  commitmentId         String
  amount               Float
  paymentDate          DateTime
  status               String                @default("pending") // pending, approved, rejected
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model Share {
  id                       String    @id @default(cuid())
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                 String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
  shareTypeId              String
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String    @default("pending") // pending, approved, rejected
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
}

model Dividend {
  id                         String   @id @default(cuid())
  member                     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId                   String
  amount                     Float
  distributionDate           DateTime
  shareCountAtDistribution   Int
  status                     String   @default("pending") // pending, approved, rejected
  notes                      String?
}


// SERVICE CHARGES
model ServiceChargeType {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String // once, monthly, yearly
  appliedServiceCharge AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  serviceChargeTypeId String
  amountCharged       Float
  dateApplied         DateTime
  status              String // pending, paid, waived
  notes               String?
}

// LOANS
model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  interestRate         Float // annual
  minLoanAmount        Float
  maxLoanAmount        Float
  minRepaymentPeriod   Int // in months
  maxRepaymentPeriod   Int // in months
  repaymentFrequency   String // monthly, quarterly, yearly
  nplInterestRate      Float // Non-performing loan interest rate
  nplGracePeriodDays   Int
  allowConcurrent      Boolean @default(false)
  loans                Loan[]
}

model Loan {
  id                     String          @id @default(cuid())
  loanAccountNumber      String?         @unique
  member                 Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId               String
  loanType               LoanType        @relation(fields: [loanTypeId], references: [id])
  loanTypeId             String
  principalAmount        Float
  interestRate           Float
  loanTerm               Int
  repaymentFrequency     String
  disbursementDate       DateTime
  status                 String // pending, active, paid_off, rejected, overdue
  remainingBalance       Float
  nextDueDate            DateTime?
  notes                  String?
  purpose                String?
  monthlyRepaymentAmount Float?
  serviceFee             Float?
  insuranceFee           Float?
  collaterals            Collateral[]
  guarantors             LoanGuarantor[]
  repayments             LoanRepayment[]
}

model Collateral {
  id           String   @id @default(cuid())
  loan         Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId       String
  type         String // GUARANTOR, TITLE_DEED
  description  String?
  documentUrl  String?
  address      Address?
}

model LoanGuarantor {
  loan          Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId        String
  guarantor     Member @relation("Guarantor", fields: [guarantorId], references: [id], onDelete: Cascade)
  guarantorId   String

  @@id([loanId, guarantorId])
}

model LoanRepayment {
  id                   String  @id @default(cuid())
  loan                 Loan    @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId               String
  member               Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId             String
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String? // Cash, Bank, Wallet
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
  principalPaid        Float
  interestPaid         Float
}

// USER AUTHENTICATION & AUTHORIZATION
model User {
  id          String   @id @default(cuid())
  userId      String   @unique // This will store the external ID from your auth provider
  email       String   @unique
  name        String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String // comma-separated list of permissions
  users       User[]
}
