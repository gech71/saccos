// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

model School {
  id            String   @id @default(uuid())
  name          String
  address       String?
  contactPerson String?
  members       Member[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id          String   @id @default(uuid())
  userId      String   @unique
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Member {
  id                      String                  @id
  fullName                String
  email                   String                  @unique
  sex                     String
  phoneNumber             String                  @unique
  schoolId                String
  school                  School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  joinDate                DateTime
  salary                  Float?
  status                  String?                 @default("active")
  closureDate             DateTime?
  address                 Address?
  emergencyContact        EmergencyContact?
  memberSavingAccounts    MemberSavingAccount[]
  savings                 Saving[]
  shares                  Share[]
  dividends               Dividend[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  appliedServiceCharges   AppliedServiceCharge[]
  shareCommitments        MemberShareCommitment[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model Address {
  id           String    @id @default(uuid())
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
  memberId     String?   @unique
  member       Member?   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  collateralId String?   @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id        String  @id @default(uuid())
  name      String
  phone     String
  memberId  String? @unique
  member    Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model SavingAccountType {
  id                    String                @id @default(uuid())
  name                  String                @unique
  description           String?
  interestRate          Float                 @default(0) // Stored as decimal, e.g., 0.05 for 5%
  contributionType      String                @default("FIXED") // FIXED or PERCENTAGE
  contributionValue     Float                 @default(0)
  memberSavingAccounts  MemberSavingAccount[]
}

model MemberSavingAccount {
  id                    String             @id @default(uuid())
  memberId              String
  member                Member             @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountTypeId   String
  savingAccountType     SavingAccountType  @relation(fields: [savingAccountTypeId], references: [id], onDelete: Restrict)
  accountNumber         String             @unique
  balance               Float              @default(0)
  initialBalance        Float              @default(0)
  expectedMonthlySaving Float?
  savings               Saving[]
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@unique([memberId, savingAccountTypeId])
}

model Saving {
  id                    String                @id @default(uuid())
  memberId              String
  member                Member                @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberSavingAccountId String?
  memberSavingAccount   MemberSavingAccount?  @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)
  amount                Float
  date                  DateTime
  month                 String
  transactionType       String // deposit or withdrawal
  status                String   @default("pending") // pending, approved, rejected
  notes                 String?
  depositMode           String? // Cash, Bank, Wallet
  sourceName            String?
  transactionReference  String?
  evidenceUrl           String?
}

model ShareType {
  id                          String                  @id @default(uuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(uuid())
  memberId               String
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId            String
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Restrict)
  monthlyCommittedAmount Float
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@unique([memberId, shareTypeId])
}

model Share {
  id                       String    @id @default(uuid())
  memberId                 String
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId              String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Restrict)
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String    @default("pending") // pending, approved, rejected
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String? // Cash, Bank, Wallet
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
  loanId                   String?
  loan                     Loan?     @relation(fields: [loanId], references: [id], onDelete: SetNull)
}

model Dividend {
  id                         String   @id @default(uuid())
  memberId                   String
  member                     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                     Float
  distributionDate           DateTime
  shareCountAtDistribution   Int
  status                     String   @default("pending") // pending, approved, rejected
  notes                      String?
}

model LoanType {
  id                   String  @id @default(uuid())
  name                 String  @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String  @default("monthly")
  nplInterestRate      Float   @default(0)
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean @default(false)
  loans                Loan[]
}

model Loan {
  id                    String          @id @default(uuid())
  loanAccountNumber     String?         @unique
  memberId              String
  member                Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId            String
  loanType              LoanType        @relation(fields: [loanTypeId], references: [id], onDelete: Restrict)
  principalAmount       Float
  interestRate          Float
  loanTerm              Int
  repaymentFrequency    String
  disbursementDate      DateTime
  status                String          @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance      Float
  nextDueDate           DateTime?
  notes                 String?
  repayments            LoanRepayment[]
  collateralShares      Share[]
  collaterals           Collateral[]
}

model LoanRepayment {
  id                   String   @id @default(uuid())
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id])
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String? // Cash, Bank, Wallet
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model Collateral {
  id           String        @id @default(uuid())
  fullName     String
  organization Organization?
  address      Address?
  loanId       String?
  loan         Loan?         @relation(fields: [loanId], references: [id], onDelete: SetNull)
}

model Organization {
  id           String     @id @default(uuid())
  name         String
  address      String?
  phone        String?
  collateralId String?    @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
}

model ServiceChargeType {
  id                  String                 @id @default(uuid())
  name                String                 @unique
  description         String?
  amount              Float
  frequency           String                 @default("once")
  appliedServiceCharges AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                    String            @id @default(uuid())
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId   String
  serviceChargeType     ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id], onDelete: Restrict)
  amountCharged         Float
  dateApplied           DateTime
  status                String            @default("pending") // pending, paid, waived
  notes                 String?
}
