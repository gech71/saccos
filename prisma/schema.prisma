// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model School {
  id            String   @id
  name          String   @unique
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                       String                   @id
  fullName                 String
  email                    String                   @unique
  sex                      String
  phoneNumber              String
  address                  Address?
  emergencyContact         EmergencyContact?
  schoolId                 String
  school                   School                   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  joinDate                 DateTime                 @default(now())
  salary                   Float?
  savingsBalance           Float                    @default(0)
  savingsAccountNumber     String?                  @unique
  sharesCount              Int                      @default(0)
  savingAccountTypeId      String?
  savingAccountType        SavingAccountType?       @relation(fields: [savingAccountTypeId], references: [id])
  expectedMonthlySaving    Float?
  status                   String                   @default("active") // "active", "inactive"
  closureDate              DateTime?
  savings                  Saving[]
  shares                   Share[]
  dividends                Dividend[]
  loans                    Loan[]
  shareCommitments         MemberShareCommitment[]
  appliedServiceCharges    AppliedServiceCharge[]
  loanRepayments           LoanRepayment[]

  @@index([schoolId])
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String?
  wereda       String?
  kebele       String?
  houseNumber  String?
  memberId     String?     @unique
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id       String  @id @default(cuid())
  name     String
  phone    String
  memberId String  @unique
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model SavingAccountType {
  id                String   @id @default(cuid())
  name              String   @unique
  interestRate      Float // e.g., 0.05 for 5%
  contributionType  String   // 'FIXED' or 'PERCENTAGE'
  contributionValue Float    // The fixed amount or the percentage value (e.g., 50 for 50 Birr, 0.02 for 2%)
  description       String?
  members           Member[]
}

model Saving {
  id                   String    @id @default(cuid())
  memberId             String
  member               Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount               Float
  date                 DateTime
  month                String
  transactionType      String // "deposit" or "withdrawal"
  status               String // "pending", "approved", "rejected"
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?

  @@index([memberId])
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  shareTypeId            String
  monthlyCommittedAmount Float
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType              ShareType @relation(fields: [shareTypeId], references: [id])

  @@unique([memberId, shareTypeId])
  @@index([memberId])
  @@index([shareTypeId])
}

model Share {
  id                       String    @id @default(cuid())
  memberId                 String
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId              String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String // "pending", "approved", "rejected"
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?

  @@index([memberId])
  @@index([shareTypeId])
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // "pending", "approved", "rejected"
  notes                    String?

  @@index([memberId])
}

model ServiceChargeType {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String // "once", "monthly", "yearly"
  appliedServiceCharge AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
  amountCharged       Float
  dateApplied         DateTime
  status              String // "pending", "paid", "waived"
  notes               String?

  @@index([memberId])
  @@index([serviceChargeTypeId])
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  interestRate         Float // annual
  loanTerm             Int // in months
  repaymentFrequency   String // monthly, quarterly, yearly
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean @default(false)
  loans                Loan[]
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id])
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String // pending, active, paid_off, rejected, overdue
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  monthlyRepaymentAmount Float?
  collaterals          Collateral[]
  repayments           LoanRepayment[]

  @@index([memberId])
  @@index([loanTypeId])
}

model Collateral {
  id             String        @id @default(cuid())
  fullName       String
  loanId         String
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  address        Address?

  @@index([loanId])
}

model Organization {
  id           String      @id @default(cuid())
  name         String
  address      String?
  phone        String?
  collateral   Collateral?
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id])
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?

  @@index([loanId])
}


// User and Role models for application access control
model User {
  id          String      @id @default(cuid())
  userId      String      @unique // This will store the ID from the external auth provider
  email       String      @unique
  name        String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  roles       Role[]
  managedBuildings Building[] @relation("BuildingManager")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
}

model Building {
  id String @id @default(cuid())
  name String
  address String
  managers User[] @relation("BuildingManager")
}
