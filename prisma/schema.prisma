// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core authentication and authorization models
model User {
  id          String   @id
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]
  member      Member?
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

// Main application data models
model School {
  id            String   @id @default(cuid())
  name          String
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                         String                 @id @default(cuid())
  fullName                   String
  email                      String                 @unique
  sex                        Sex
  phoneNumber                String
  address                    Address
  emergencyContact           EmergencyContact
  joinDate                   DateTime
  savingsBalance             Float                  @default(0)
  savingsAccountNumber       String?                @unique
  sharesCount                Int                    @default(0)
  shareCommitments           MemberShareCommitment[]
  expectedMonthlySaving      Float?
  status                     MemberStatus           @default(active)
  closureDate                DateTime?
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt

  schoolId                   String
  school                     School                 @relation(fields: [schoolId], references: [id])

  savingAccountTypeId        String?
  savingAccountType          SavingAccountType?     @relation(fields: [savingAccountTypeId], references: [id])

  userId                     String?                @unique
  user                       User?                  @relation(fields: [userId], references: [id])

  // Relations to transactions
  savings                    Saving[]
  shares                     Share[]
  dividends                  Dividend[]
  loans                      Loan[]
  loanRepayments             LoanRepayment[]
  appliedServiceCharges      AppliedServiceCharge[]
}

model SavingAccountType {
  id                          String   @id @default(cuid())
  name                        String   @unique
  interestRate                Float
  description                 String?
  expectedMonthlyContribution Float?
  members                     Member[]
}

model ShareType {
  id                          String   @id @default(cuid())
  name                        String   @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
}

model LoanType {
  id                   String               @id @default(cuid())
  name                 String               @unique
  description          String?
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   RepaymentFrequency
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean?             @default(false)
  loans                Loan[]
}

model ServiceChargeType {
  id             String               @id @default(cuid())
  name           String               @unique
  description    String?
  amount         Float
  frequency      ChargeFrequency
  appliedCharges AppliedServiceCharge[]
}

// Transactional Models
model Saving {
  id                 String            @id @default(cuid())
  amount             Float
  date               DateTime
  month              String
  transactionType    TransactionType
  status             TransactionStatus
  notes              String?
  depositMode        DepositMode?
  paymentDetails     PaymentDetails?

  memberId           String
  member             Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Share {
  id                       String            @id @default(cuid())
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   TransactionStatus
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              DepositMode?
  paymentDetails           PaymentDetails?

  memberId                 String
  member                   Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId              String
  shareType                ShareType         @relation(fields: [shareTypeId], references: [id])
}

model Dividend {
  id                       String            @id @default(cuid())
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   TransactionStatus
  notes                    String?

  memberId                 String
  member                   Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model AppliedServiceCharge {
  id                    String              @id @default(cuid())
  amountCharged         Float
  dateApplied           DateTime
  status                AppliedChargeStatus
  notes                 String?

  memberId              String
  member                Member              @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId   String
  serviceChargeType     ServiceChargeType   @relation(fields: [serviceChargeTypeId], references: [id])
}

model Loan {
  id                       String               @id @default(cuid())
  loanAccountNumber        String?              @unique
  principalAmount          Float
  interestRate             Float
  loanTerm                 Int
  repaymentFrequency       RepaymentFrequency
  disbursementDate         DateTime
  status                   LoanStatus
  remainingBalance         Float
  nextDueDate              DateTime?
  notes                    String?
  monthlyRepaymentAmount   Float?
  collateral               Collateral[]

  memberId                 String
  member                   Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId               String
  loanType                 LoanType             @relation(fields: [loanTypeId], references: [id])
  repayments               LoanRepayment[]
}

model LoanRepayment {
  id                 String         @id @default(cuid())
  amountPaid         Float
  paymentDate        DateTime
  notes              String?
  depositMode        DepositMode?
  paymentDetails     PaymentDetails?

  loanId             String
  loan               Loan           @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId           String
  member             Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
}


// --- ENUMS ---
enum Sex {
  Male
  Female
  Other
}

enum MemberStatus {
  active
  inactive
}

enum TransactionType {
  deposit
  withdrawal
}

enum TransactionStatus {
  pending
  approved
  rejected
}

enum DepositMode {
  Cash
  Bank
  Wallet
}

enum AppliedChargeStatus {
  pending
  paid
  waived
}

enum RepaymentFrequency {
  monthly
  quarterly
  yearly
}

enum LoanStatus {
  pending
  active
  paid_off
  rejected
  overdue
}

enum ChargeFrequency {
  once
  monthly
  yearly
}


// --- COMPOSITE TYPES ---
type Address {
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
}

type EmergencyContact {
  name  String
  phone String
}

type MemberShareCommitment {
  shareTypeId            String
  shareTypeName          String
  monthlyCommittedAmount Float
}

type PaymentDetails {
  sourceName             String?
  transactionReference   String?
  evidenceUrl            String?
}

type Organization {
  name    String
  address String
  phone   String
}

type Collateral {
  id           String
  fullName     String
  organization Organization?
  address      Address
}
