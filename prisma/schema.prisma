// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  userId      String    @unique // From external auth provider like Firebase Auth or custom auth
  email       String    @unique
  name        String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  managedBuildings Building[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
}

model Building {
  id      String @id @default(cuid())
  name    String
  address String?
  managers User[]
}

model School {
  id            String   @id
  name          String
  address       String?
  contactPerson String?
  members       Member[]
}

model Member {
  id                       String                  @id
  fullName                 String
  email                    String                  @unique
  sex                      String
  phoneNumber              String
  schoolId                 String
  school                   School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  joinDate                 DateTime
  salary                   Float?
  status                   String                  @default("active") // e.g., active, inactive
  closureDate              DateTime?
  address                  Address?
  emergencyContact         EmergencyContact?
  savings                  Saving[]
  shares                   Share[]
  dividends                Dividend[]
  loans                    Loan[]
  loanRepayments           LoanRepayment[]
  appliedServiceCharges    AppliedServiceCharge[]
  shareCommitments         MemberShareCommitment[]
  memberSavingAccounts     MemberSavingAccount[]
}

model SavingAccountType {
  id                       String                  @id @default(cuid())
  name                     String                  @unique
  description              String?
  interestRate             Float
  contributionType         String // FIXED or PERCENTAGE
  contributionValue        Float
  memberSavingAccounts     MemberSavingAccount[]
}

model MemberSavingAccount {
    id                  String @id @default(cuid())
    memberId            String
    savingAccountTypeId String
    accountNumber       String @unique
    expectedMonthlySaving Float
    balance             Float @default(0)
    
    member              Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
    savingAccountType   SavingAccountType @relation(fields: [savingAccountTypeId], references: [id], onDelete: Cascade)

    @@unique([memberId, savingAccountTypeId])
}

model Saving {
  id                   String    @id @default(cuid())
  memberId             String
  member               Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount               Float
  date                 DateTime
  month                String
  transactionType      String // 'deposit' or 'withdrawal'
  status               String // 'pending', 'approved', 'rejected'
  notes                String?
  depositMode          String? // 'Cash', 'Bank', 'Wallet'
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model MemberShareCommitment {
  id                     String    @id @default(cuid())
  memberId               String
  shareTypeId            String
  monthlyCommittedAmount Float
  member                 Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareType              ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Cascade)

  @@unique([memberId, shareTypeId])
}

model Share {
  id                       String    @id @default(cuid())
  memberId                 String
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId              String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id], onDelete: Restrict)
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String // 'pending', 'approved', 'rejected'
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?
  depositMode              String?
  sourceName               String?
  transactionReference     String?
  evidenceUrl              String?
}

model Dividend {
  id                       String   @id @default(cuid())
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String // 'pending', 'approved', 'rejected'
  notes                    String?
}

model LoanType {
  id                   String   @id @default(cuid())
  name                 String   @unique
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  nplInterestRate      Float
  nplGracePeriodDays   Int?
  allowConcurrent      Boolean? @default(false)
  loans                Loan[]
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id], onDelete: Restrict)
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String // 'pending', 'active', 'paid_off', 'rejected', 'overdue'
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?
  collaterals          Collateral[]
  repayments           LoanRepayment[]
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id], onDelete: NoAction)
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
}

model ServiceChargeType {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String // 'once', 'monthly', 'yearly'
  appliedServiceCharge AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                  String            @id @default(cuid())
  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId String
  serviceChargeType   ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id], onDelete: Restrict)
  amountCharged       Float
  dateApplied         DateTime
  status              String // 'pending', 'paid', 'waived'
  notes               String?
}

model Address {
  id           String      @id @default(cuid())
  memberId     String?     @unique
  member       Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  collateralId String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  city         String
  subCity      String
  wereda       String
  kebele       String?
  houseNumber  String?
}

model EmergencyContact {
  id       String  @id @default(cuid())
  memberId String  @unique
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  name     String
  phone    String
}

model Collateral {
  id             String        @id @default(cuid())
  loanId         String
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  fullName       String
  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  address        Address?
}

model Organization {
  id           String     @id @default(cuid())
  name         String
  address      String?
  phone        String?
  collateral   Collateral?
}
