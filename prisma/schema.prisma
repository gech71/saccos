// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// -------------------
// AUTH-RELATED MODELS
// -------------------
model User {
  id          String   @id @default(cuid())
  userId      String   @unique // From external auth provider
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[]
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String
  users       User[]
}

// -------------------
// APP-SPECIFIC MODELS
// -------------------

model School {
  id            String   @id
  name          String
  address       String?
  contactPerson String?
  members       Member[]
}

model Building {
  id String @id @default(cuid())
  name String
  address String
  managers User[]
}

model Member {
  id                      String                  @id
  fullName                String
  email                   String                  @unique
  sex                     String
  phoneNumber             String
  joinDate                DateTime
  salary                  Float?
  status                  String                  @default("active")
  closureDate             DateTime?

  // RELATIONS
  schoolId                String
  school                  School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  addressId               String?                 @unique
  address                 Address?                @relation(fields: [addressId], references: [id], onDelete: SetNull)

  emergencyContactId      String?                 @unique
  emergencyContact        EmergencyContact?       @relation(fields: [emergencyContactId], references: [id], onDelete: SetNull)

  memberSavingAccounts    MemberSavingAccount[]
  shareCommitments        MemberShareCommitment[]
  shares                  Share[]
  dividends               Dividend[]
  appliedServiceCharges   AppliedServiceCharge[]
  loans                   Loan[]
  loanRepayments          LoanRepayment[]
  savings                 Saving[]

  @@index([schoolId])
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String?
  wereda       String?
  kebele       String?
  houseNumber  String?

  member       Member?
  collateral   Collateral?
}

model EmergencyContact {
  id     String  @id @default(cuid())
  name   String
  phone  String

  member Member?
}


// Core Types
model SavingAccountType {
  id                  String                @id @default(cuid())
  name                String                @unique
  interestRate        Float                 // e.g., 0.05 for 5%
  description         String?
  contributionType    String                // 'FIXED' or 'PERCENTAGE'
  contributionValue   Float
  memberSavingAccounts MemberSavingAccount[]
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  shares                      Share[]
  memberShareCommitments      MemberShareCommitment[]
}

model LoanType {
  id                    String   @id @default(cuid())
  name                  String   @unique
  interestRate          Float
  loanTerm              Int
  repaymentFrequency    String
  nplInterestRate       Float
  nplGracePeriodDays    Int?
  allowConcurrent       Boolean?
  loans                 Loan[]
}

model ServiceChargeType {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  description           String?
  amount                Float
  frequency             String
  appliedServiceCharges AppliedServiceCharge[]
}

// Member-related data
model MemberSavingAccount {
  id                    String            @id @default(cuid())
  accountNumber         String            @unique
  balance               Float             @default(0)
  expectedMonthlySaving Float?

  // RELATIONS
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  savingAccountTypeId   String
  savingAccountType     SavingAccountType @relation(fields: [savingAccountTypeId], references: [id])
  savings               Saving[]

  @@index([memberId])
  @@index([savingAccountTypeId])
}


model MemberShareCommitment {
  id                      String    @id @default(cuid())
  monthlyCommittedAmount  Float

  // RELATIONS
  memberId                String
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId             String
  shareType               ShareType @relation(fields: [shareTypeId], references: [id])

  @@unique([memberId, shareTypeId])
  @@index([memberId])
  @@index([shareTypeId])
}


// Transactional Models
model Saving {
  id                      String  @id @default(cuid())
  amount                  Float
  date                    DateTime
  month                   String
  transactionType         String // 'deposit' or 'withdrawal'
  status                  String // 'pending', 'approved', 'rejected'
  notes                   String?
  depositMode             String? // 'Cash', 'Bank', 'Wallet'
  sourceName              String?
  transactionReference    String?
  evidenceUrl             String?

  // RELATIONS
  memberId                String
  member                  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  memberSavingAccountId   String?
  memberSavingAccount     MemberSavingAccount? @relation(fields: [memberSavingAccountId], references: [id], onDelete: SetNull)

  @@index([memberId])
  @@index([memberSavingAccountId])
}

model Share {
  id                        String  @id @default(cuid())
  count                     Int
  allocationDate            DateTime
  valuePerShare             Float
  status                    String // 'pending', 'approved', 'rejected'
  contributionAmount        Float?
  totalValueForAllocation   Float?
  notes                     String?
  depositMode               String? // 'Cash', 'Bank', 'Wallet'
  sourceName                String?
  transactionReference      String?
  evidenceUrl               String?

  // RELATIONS
  memberId                  String
  member                    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  shareTypeId               String
  shareType                 ShareType @relation(fields: [shareTypeId], references: [id])
  loanId                    String?
  loan                      Loan?     @relation(fields: [loanId], references: [id])

  @@index([memberId])
  @@index([shareTypeId])
  @@index([loanId])
}

model Dividend {
  id                        String   @id @default(cuid())
  amount                    Float
  distributionDate          DateTime
  shareCountAtDistribution  Int
  status                    String // 'pending', 'approved', 'rejected'
  notes                     String?

  // RELATIONS
  memberId                  String
  member                    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
}


model AppliedServiceCharge {
  id                    String            @id @default(cuid())
  amountCharged         Float
  dateApplied           DateTime
  status                String // 'pending', 'paid', 'waived'
  notes                 String?

  // RELATIONS
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serviceChargeTypeId   String
  serviceChargeType     ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])

  @@index([memberId])
  @@index([serviceChargeTypeId])
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String          // 'pending', 'active', 'paid_off', 'rejected', 'overdue'
  remainingBalance     Float
  nextDueDate          DateTime?
  notes                String?

  // RELATIONS
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id])
  collaterals          Collateral[]
  shares               Share[]
  loanRepayments       LoanRepayment[]

  @@index([memberId])
  @@index([loanTypeId])
}

model Collateral {
  id              String        @id @default(cuid())
  fullName        String

  // RELATIONS
  loanId          String
  loan            Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  organizationId  String?       @unique
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  addressId       String?       @unique
  address         Address?      @relation(fields: [addressId], references: [id], onDelete: SetNull)

  @@index([loanId])
}

model Organization {
  id       String     @id @default(cuid())
  name     String
  address  String
  phone    String

  collateral Collateral?
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?

  // RELATIONS
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  memberId             String
  member               Member   @relation(fields: [memberId], references: [id]) // No cascade delete here

  @@index([loanId])
  @@index([memberId])
}
