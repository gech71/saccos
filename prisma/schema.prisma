// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model School {
  id            String    @id
  name          String
  address       String?
  contactPerson String?
  members       Member[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model User {
  id          String   @id @default(cuid())
  userId      String   @unique
  email       String   @unique
  name        String
  firstName   String?
  lastName    String?
  phoneNumber String?
  roles       Role[]
  buildings   Building[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]
}

model Building {
  id        String   @id @default(cuid())
  name      String
  address   String?
  managers  User[]
}

model Member {
  id                    String                  @id
  fullName              String
  email                 String                  @unique
  sex                   String
  phoneNumber           String
  salary                Float?
  status                String                  @default("active") // active, inactive
  joinDate              DateTime
  closureDate           DateTime?
  
  schoolId              String
  school                School                  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  address               Address?
  emergencyContact      EmergencyContact?
  
  savings               Saving[]
  shares                Share[]
  dividends             Dividend[]
  loans                 Loan[]
  loanRepayments        LoanRepayment[]
  appliedServiceCharges AppliedServiceCharge[]
  
  memberSavingAccounts  MemberSavingAccount[]
  shareCommitments      MemberShareCommitment[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Address {
  id           String      @id @default(cuid())
  city         String
  subCity      String?
  wereda       String?
  kebele       String?
  houseNumber  String?

  memberId     String      @unique
  member       Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)

  collateralId String?     @unique
  collateral   Collateral? @relation(fields: [collateralId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id     String @id @default(cuid())
  name   String
  phone  String

  memberId String @unique
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model SavingAccountType {
  id                   String                  @id @default(cuid())
  name                 String                  @unique
  interestRate         Float
  description          String?
  contributionType     String                  // e.g., FIXED, PERCENTAGE
  contributionValue    Float

  memberSavingAccounts MemberSavingAccount[]
}

model MemberSavingAccount {
  id                  String            @id @default(cuid())
  accountNumber       String            @unique
  balance             Float             @default(0)
  expectedMonthlySaving Float

  memberId            String
  member              Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  savingAccountTypeId String
  savingAccountType   SavingAccountType @relation(fields: [savingAccountTypeId], references: [id])
}


model Saving {
  id                   String    @id @default(cuid())
  amount               Float
  date                 DateTime
  month                String
  transactionType      String // deposit, withdrawal
  status               String    @default("pending") // pending, approved, rejected
  notes                String?
  depositMode          String? // Cash, Bank, Wallet
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
  
  memberId             String
  member               Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model ShareType {
  id                          String                  @id @default(cuid())
  name                        String                  @unique
  description                 String?
  valuePerShare               Float
  expectedMonthlyContribution Float?
  
  shares                      Share[]
  commitments                 MemberShareCommitment[]
}

model MemberShareCommitment {
  id                      String    @id @default(cuid())
  monthlyCommittedAmount  Float

  memberId                String
  member                  Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  shareTypeId             String
  shareType               ShareType @relation(fields: [shareTypeId], references: [id])

  @@unique([memberId, shareTypeId])
}

model Share {
  id                       String    @id @default(cuid())
  count                    Int
  allocationDate           DateTime
  valuePerShare            Float
  status                   String    @default("pending") // pending, approved, rejected
  notes                    String?
  contributionAmount       Float?
  totalValueForAllocation  Float?

  depositMode          String? // Cash, Bank, Wallet
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
  
  memberId                 String
  member                   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  shareTypeId              String
  shareType                ShareType @relation(fields: [shareTypeId], references: [id])
}

model Dividend {
  id                       String   @id @default(cuid())
  amount                   Float
  distributionDate         DateTime
  shareCountAtDistribution Int
  status                   String   @default("pending") // pending, approved, rejected
  notes                    String?
  
  memberId                 String
  member                   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model ServiceChargeType {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  amount               Float
  frequency            String                 // once, monthly, yearly
  
  appliedCharges       AppliedServiceCharge[]
}

model AppliedServiceCharge {
  id                    String            @id @default(cuid())
  amountCharged         Float
  dateApplied           DateTime
  status                String            @default("pending") // pending, paid, waived
  notes                 String?
  
  memberId              String
  member                Member            @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  serviceChargeTypeId   String
  serviceChargeType     ServiceChargeType @relation(fields: [serviceChargeTypeId], references: [id])
}

model LoanType {
  id                   String  @id @default(cuid())
  name                 String  @unique
  interestRate         Float   // Annual interest rate, e.g., 0.08 for 8%
  loanTerm             Int     // in months
  repaymentFrequency   String  // monthly, quarterly, yearly
  nplInterestRate      Float   // Non-Performing Loan interest rate, annual
  nplGracePeriodDays   Int?    // Days after due date before NPL rate applies
  allowConcurrent      Boolean @default(false)
  
  loans                Loan[]
}

model Loan {
  id                   String          @id @default(cuid())
  loanAccountNumber    String?         @unique
  principalAmount      Float
  interestRate         Float
  loanTerm             Int
  repaymentFrequency   String
  disbursementDate     DateTime
  status               String          @default("pending") // pending, active, paid_off, rejected, overdue
  remainingBalance     Float
  nextDueDate          DateTime?
  monthlyRepaymentAmount Float?
  notes                String?
  
  memberId             String
  member               Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  loanTypeId           String
  loanType             LoanType        @relation(fields: [loanTypeId], references: [id])
  
  collaterals          Collateral[]
  repayments           LoanRepayment[]
}

model LoanRepayment {
  id                   String   @id @default(cuid())
  amountPaid           Float
  paymentDate          DateTime
  notes                String?
  depositMode          String?  // Cash, Bank, Wallet
  sourceName           String?
  transactionReference String?
  evidenceUrl          String?
  
  loanId               String
  loan                 Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  memberId             String
  member               Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Collateral {
  id             String        @id @default(cuid())
  fullName       String

  loanId         String
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  
  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  addressId      String?       @unique
  address        Address?
}

model Organization {
  id         String     @id @default(cuid())
  name       String
  address    String?
  phone      String?
  collateral Collateral?
}
